   
style.
    .chart {
            shape-rendering: crispEdges;
        }

        .mini text {
            font: 9px sans-serif;   
        }

        .main text {
            font: 12px sans-serif;  
        }

        .miniItem0 {
            fill: darksalmon;
            stroke-width: 6;    
        }

        .miniItem1 {
            fill: darkolivegreen;
            fill-opacity: .7;
            stroke-width: 6;    
        }

        .miniItem2 {
            fill: slategray;
            fill-opacity: .7;
            stroke-width: 6;    
        }

        .brush .extent {
            stroke: gray;
            fill: dodgerblue;
            fill-opacity: .365;
        }   
   

#perfLogViewer   
 
script.    
    var updatePerfLogViewer = function(logInfo) {        
        var getLowestTime = function(data) {
            var lowestTime = 0;
            
            var time = (data.DataBuffer[0].TimerLower32) + 0;
            lowestTime = time;
            
            for(var i = 0; i < data.DataBuffer.length; ++i) {
                var time = (data.DataBuffer[i].TimerLower32) + 0;
                
                if(time < lowestTime) {
                    lowestTime = time;
                }
            }
            
            return lowestTime;
        }       
        
               
        var getHighestTime = function(data) {
            var highestTime = 0;
            
            var time = (data.DataBuffer[0].TimerLower32) + 0;
            highestTime = time;
            
            for(var i = 0; i < data.DataBuffer.length; ++i) {
                var time = (data.DataBuffer[i].TimerLower32) + 0;
                
                if(time > highestTime) {
                    highestTime = time;
                }
            }
            
            return highestTime;
        }       
        
        
        
        var getLaneNames = function(data) {
            var highestPerfID = 0;
            
            for(var i = 0; i < data.DataBuffer.length; ++i) {
                var perfID = data.DataBuffer[i].Data & 0x7fffffff;
                if(perfID > highestPerfID) {
                    highestPerfID = perfID;
                }
            }
            
            var aNames = new Array(highestPerfID+1);
            
            for(var i = 0; i < aNames.length; ++i) {
                aNames[i] = 'PerfID' + i;
            }
            
            return aNames;
        }
        
        
        var getLaneItems = function(data, length) {
            var itemCurrent = new Array(length);
            var items = [];
            
            for(var i = 0; i < length; ++i) {
                itemCurrent[i] = {ID: i, Start: 0, Stop: 0};
            }
            
            for(var i = 0; i < data.DataBuffer.length; ++i) {
                var perfID = data.DataBuffer[i].Data & 0x7fffffff;
                var entryType = (data.DataBuffer[i].Data & 0x80000000) >>> 31;
                var time = (data.DataBuffer[i].TimerLower32) + 0;
                                
                if(entryType == 0) {
                    /* This is a start entry. */
                    itemCurrent[perfID].Start = time;
                } else {
                    /* This is a stop entry. */
                    itemCurrent[perfID].Stop = time;
                    items.push({Lane: perfID, ID: perfID, Start: itemCurrent[perfID].Start, Stop: itemCurrent[perfID].Stop});
                }
            }
            
            console.log(items);
            
            return items;
        }
        
        $.ajax({
            url: '/plugin/core/es/perfLogFile/' + logInfo.jsonFile,
            method: 'GET',
            dataType: 'json',
            error: function() {
                console.log('error');
            },
            success: function(data) {
                console.log(data);
                
                var lanes = getLaneNames(data);
                var items = getLaneItems(data, lanes.length);
                
                var timeBegin = getLowestTime(data);
                var timeEnd = getLowestTime(data);
                
                drawPerfLogView(lanes, lanes.length, items, timeBegin, timeEnd);
            }
        });
    }
    
    
    var drawPerfLogView = function(lanes, laneLength, items, timeBegin, timeEnd) {
    

    
    
    var m = [20, 15, 15, 120], //top right bottom left
            w = 960 - m[1] - m[3],
            h = 600 - m[0] - m[2],
            miniHeight = laneLength * 12 + 50,
            mainHeight = h - miniHeight - 50;

    //scales
    var x = d3.scale.linear()
            .domain([timeBegin, timeEnd])
            .range([0, w]);
    var x1 = d3.scale.linear()
            .range([0, w]);
    var y1 = d3.scale.linear()
            .domain([0, laneLength])
            .range([0, mainHeight]);
    var y2 = d3.scale.linear()
            .domain([0, laneLength])
            .range([0, miniHeight]);

    var chart = d3.select("#perfLogViewer")
            .append("svg")
            .attr("width", w + m[1] + m[3])
            .attr("height", h + m[0] + m[2])
            .attr("class", "chart");
        
    chart.append("defs").append("clipPath")
            .attr("ID", "clip")
            .append("rect")
            .attr("width", w)
            .attr("height", mainHeight);

    var main = chart.append("g")
            .attr("transform", "translate(" + m[3] + "," + m[0] + ")")
            .attr("width", w)
            .attr("height", mainHeight)
            .attr("class", "main");

    var mini = chart.append("g")
            .attr("transform", "translate(" + m[3] + "," + (mainHeight + m[0]) + ")")
            .attr("width", w)
            .attr("height", miniHeight)
            .attr("class", "mini");
        
    //main lanes and texts
    main.append("g").selectAll(".laneLines")
            .data(items)
            .enter().append("line")
            .attr("x1", m[1])
            .attr("y1", function(d) {return y1(d.Lane);})
            .attr("x2", w)
            .attr("y2", function(d) {return y1(d.Lane);})
            .attr("stroke", "lightgray")

    main.append("g").selectAll(".laneText")
            .data(lanes)
            .enter().append("text")
            .text(function(d) {return d;})
            .attr("x", -m[1])
            .attr("y", function(d, i) {return y1(i + .5);})
            .attr("dy", ".5ex")
            .attr("text-anchor", "Stop")
            .attr("class", "laneText");
        
    //mini lanes and texts
    mini.append("g").selectAll(".laneLines")
            .data(items)
            .enter().append("line")
            .attr("x1", m[1])
            .attr("y1", function(d) {return y2(d.Lane);})
            .attr("x2", w)
            .attr("y2", function(d) {return y2(d.Lane);})
            .attr("stroke", "lightgray");

    mini.append("g").selectAll(".laneText")
            .data(lanes)
            .enter().append("text")
            .text(function(d) {return d;})
            .attr("x", -m[1])
            .attr("y", function(d, i) {return y2(i + .5);})
            .attr("dy", ".5ex")
            .attr("text-anchor", "Stop")
            .attr("class", "laneText");

    var itemRects = main.append("g")
                            .attr("clip-path", "url(#clip)");
        
    //mini item rects
    mini.append("g").selectAll("miniItems")
            .data(items)
            .enter().append("rect")
            .attr("class", function(d) {return "miniItem" + d.Lane;})
            .attr("x", function(d) {return x(d.Start);})
            .attr("y", function(d) {return y2(d.Lane + .5) - 5;})
            .attr("width", function(d) {return x(d.Stop - d.Start);})
            .attr("height", 10);

    //brush
    var brush = d3.svg.brush()
            .x(x)
            .on("brush", display);

    mini.append("g")
            .attr("class", "x brush")
            .call(brush)
            .selectAll("rect")
            .attr("y", 1)
            .attr("height", miniHeight - 1);

    
        
    function display() {
        var rects, labels,
            minExtent = brush.extent()[0],
            maxExtent = brush.extent()[1],
            visItems = items.filter(function(d) {return d.Start < maxExtent && d.Stop > minExtent;});

        mini.select(".brush")
            .call(brush.extent([minExtent, maxExtent]));

        x1.domain([minExtent, maxExtent]);

        //update main item rects
        rects = itemRects.selectAll("rect")
            .data(visItems, function(d) { return d.ID; })
            .attr("x", function(d) {return x1(d.Start);})
            .attr("width", function(d) {return x1(d.Stop) - x1(d.Start);});
            
        rects.enter().append("rect")
            .attr("class", function(d) {return "miniItem" + d.Lane;})
            .attr("x", function(d) {return x1(d.Start);})
            .attr("y", function(d) {return y1(d.Lane) + 10;})
            .attr("width", function(d) {return x1(d.Stop) - x1(d.Start);})
            .attr("height", function(d) {return .8 * y1(1);});

        rects.exit().remove();

        //update the item labels
        labels = itemRects.selectAll("text")
            .data(visItems, function (d) { return d.ID; })
            .attr("x", function(d) {return x1(Math.max(d.Start, minExtent) + 2);});

        labels.enter().append("text")
            .text(function(d) {return d.ID;})
            .attr("x", function(d) {return x1(Math.max(d.Start, minExtent));})
            .attr("y", function(d) {return y1(d.Lane + .5);})
            .attr("text-anchor", "Start");

        labels.exit().remove();
    }
    }