extends ../../web_includes/common/layout

block includes
  include ../../web_includes/common/common_includes.pug

block header
  i.fa-fw.fa.fa-signal
  | Pilot Display

block main
  .row
    article.col-xs-12.col-sm-12.col-md-6.col-lg-6
      #wid-Flight-HUD.jarviswidget.jarviswidget-color-blueDark(data-widget-editbutton='false',data-widget-colorbutton='false',data-widget-deletebutton='false')
        header
          span.widget-icon
            i.fa.fa-table
          h2 Attitude Indicator
        div
          .jarviswidget-editbox
            input.form-control(type='text')
          .widget-body(style='padding: 0px')
            #touchpad
              #hud(style='padding: 0px; margin-bottom: -5px;')
  .toggle_switch
    br
    table(style="width:300px")
      tbody
        tr
          td(style='width: 70px;')
            h2 Video
          td
            table
              tbody
                tr
                  td
                    table(style='width: 70px;')
                      tbody
                        tr
                          td(style='width: 15px;') OFF
                          td(style='width: 40px;')
                          td(style='width: 15px;') ON
                tr
                  td
                    label.switch
                      input(type="checkbox")
                      span(class="v_slider round")
        tr 
          td
            button.btn.btn-primary(onClick="setAltitudeOffset()") Set Altitude Offset 
          td(style="width:110px")
            input.form-control#AltitudeOffsetValue(style="margin:5px; width:100px" value="0")
          td  
            p(style="margin:5px;") meters
          td
            p#AltitudeOffsetStatus(style="color:green;width:500px;text-align:end") [OK]
                
    script.
        function FloatToPercent(item) {
            //return Number((item * 100).toFixed(0));
            return item * 100;
        }        
                
    article.col-xs-10.col-sm-8.col-md-6.col-lg-6(style='max-width:450px')
        #wid-BAT-BatteryStatus.jarviswidget.jarviswidget-color-blueDark(data-widget-editbutton='false')
          header
            span.widget-icon
              i.fa.fa-table
            h2 Battery Status (Output)
          div
            .jarviswidget-editbox
              input.form-control(type='text')
            .widget-body
              .table-responsive
                table.table.table-condensed
                  tbody
                    tr
                      th Timestamp
                      td
                        span(data-sage={tlm: [{name:'/CFS/BAT/BatteryStatus_Timestamp'}]}) ---
                    tr
                      th Voltage (filtered)
                      td
                        span(data-sage={tlm: [{name:'/CFS/BAT/BatteryStatus_VoltageFiltered'}]}) ---
                    tr
                      th Remaining
                      td
                        span(data-sage={tlm: [{name:'/CFS/BAT/BatteryStatus_Remaining', format:'%.0f%%', calibration:{type:'function', function:'FloatToPercent(value)'}}]}) ---
                    tr
                      th Warning
                      td
                        span(data-sage={tlm: [{name:'/CFS/BAT/BatteryStatus_Warning'}]}) ---
    
  .row.row-fluid
    article.col-xs-10.col-sm-8.col-md-6.col-lg-6(style='max-width:750px')
      #wid-VM-HK.jarviswidget.jarviswidget-color-blueDark(data-widget-editbutton='false')
        header
          span.widget-icon
            i.fa.fa-table
          h2 Telemetry
        div
          .jarviswidget-editbox
            input.form-control(type='text')
          .widget-body
            .table-responsive
              table.table.table-condensed
                tbody
                  tr
                    th Cmd Count
                    td
                      span(data-sage={tlm: [{name:'/CFS/VM/CmdCounter'}]}) ---
                  tr
                    th Error Count
                    td
                      span(data-sage={tlm: [{name:'/CFS/VM/ErrCounter'}]}) ---
                  tr
                    th Arming State
                    td
                      span(data-sage={tlm: [{name:'/CFS/VM/ArmingState'}]}) ---
                  tr
                    th Nav State
                    td
                      span(data-sage={tlm: [{name:'/CFS/VM/NavState'}]}) ---
                  
  .row.row-fluid
    article.col-xs-10.col-sm-8.col-md-6.col-lg-6(style='max-width:750px')
      #wid-VM-ArmingState.jarviswidget.jarviswidget-color-blueDark(data-widget-editbutton='false')
        header
          span.widget-icon
            i.fa.fa-table
          h2 Commanding
        div
          .jarviswidget-editbox
            input.form-control(type='text')
          .widget-body
            .table-responsive
              table.table.table-condensed
                tbody

                    button.btn.btn-primary(data-sage={cmd: {name:'/CFS/VM/NoOp'}}) No-Op
                    button.btn.btn-primary(data-sage={cmd: {name:'/CFS/VM/Reset'}}) Reset
                    hr
                    button.btn.btn-primary(data-sage={cmd: {name:'/CFS/VM/Arm'}}) Arm
                    button.btn.btn-primary(data-sage={cmd: {name:'/CFS/VM/Disarm'}}) Disarm
                    hr
                    button.btn.btn-primary(data-sage={cmd: {name:'/CFS/VM/SetNavManual'}}) Manual
                    button.btn.btn-primary(data-sage={cmd: {name:'/CFS/VM/SetNavAltCtl'}}) AltCtl
                    button.btn.btn-primary(data-sage={cmd: {name:'/CFS/VM/SetNavPosCtl'}}) PosCtl
                    button.btn.btn-primary(data-sage={cmd: {name:'/CFS/VM/SetNavAutoLoiter'}}) Loiter 
                    button.btn.btn-primary(data-sage={cmd: {name:'/CFS/VM/SetNavAutoRTL'}}) Auto RTL 
                    button.btn.btn-primary(data-sage={cmd: {name:'/CFS/VM/SetNavAcro'}}) Acro 
                    button.btn.btn-primary(data-sage={cmd: {name:'/CFS/VM/SetNavStabilize'}}) Stabilize  
                    button.btn.btn-primary(data-sage={cmd: {name:'/CFS/VM/SetNavRattitude'}}) Rattitude  
                    button.btn.btn-primary(data-sage={cmd: {name:'/CFS/VM/SetNavAutoTakeoff'}}) Auto Takeoff  
                    button.btn.btn-primary(data-sage={cmd: {name:'/CFS/VM/SetNavAutoLand'}}) Auto Land
  .row.row-fluid
    article.col-xs-10.col-sm-8.col-md-6.col-lg-6(style='max-width:750px')
      #wid-VC-CmdAndData.jarviswidget.jarviswidget-color-blueDark(data-widget-editbutton='false')
        header
          span.widget-icon
            i.fa.fa-table
          h2 Video Control
        div
          .jarviswidget-editbox
            input.form-control(type='text')
          .widget-body
            .table-responsive
              table.table.table-condensed
                tbody
                  tr
                    th Cmd Count
                    td
                      span(data-sage={tlm: [{name:'/CFS/VC/CmdCounter'}]}) ---
                  tr
                    th Error Count
                    td
                      span(data-sage={tlm: [{name:'/CFS/VC/ErrCounter'}]}) ---
                  tr
                    th State
                    td
                      span(data-sage={tlm: [{name:'/CFS/VC/State'}]}) ---
            footer
              button.btn.btn-primary(data-sage={cmd: {name:'/CFS/VC/NoOp'}}) No-Op
              button.btn.btn-primary(data-sage={cmd: {name:'/CFS/VC/Reset'}}) Reset
              button.btn.btn-primary(data-sage={cmd: {name:'/CFS/VC/StartStreaming'}}) Start Streaming
              button.btn.btn-primary(data-sage={cmd: {name:'/CFS/VC/StopStreaming'}}) Stop Streaming            


  script.
    var Position = {Lat: 0, Lon: 0, Alt: 0};
    var Attitude = {Yaw: 0, Pitch: 0, Roll: 0};
    var HUDCount = 0;
    var HUDStarted = false;

    //flyToLocation();

    /* Heads Up Display */

    var draw;
    var bgOpacity = 0.5;
    var curHeading = 0;
    var curPitch = 0;
    var curRoll = 0;
    var curAltitude = 0.0;
    var textHeading;
    var hdTicks;
    var hdTicksMask;
    var hdWidth;
    var hudHeight;
    var hudWidth;
    var pxPer15Degrees;
    var pxPerDegree;
    var degPerPitchLine = 15;
    var posPitchLineOnScreen = 3.5;
    var pxPerPitchLine;
    var pxPerDegreePitch;
    var pitchIndicator;
    var altPosMetersOnScreen = 5;
    var altPxPerMeter;
    var altitudeIndicator;
    var textAltitude;
    var altTicks;
    var OffsetY = 0;
    var rotation = 0;
    var hrzWidth;
    var cameraImage;
    var imageBuffer;
    var Q = [];
    var AltOffset = 0;
    var prevTS = 0;
    var currTS = 0;
    var ctr = 0;
    var fps = 0;
    var currentAltimeterCenter = 0.0;
    var altitudeOffsetSwitch = false;
    var altimeter;
    var altTicksArea;
    
    

    var GetTime = function(){
        var d = new Date();
        var seconds = d.getTime()/1000;
        return seconds;
    }
    var setAltitudeOffset = function(){
        try{
            AltOffset = parseFloat($("#AltitudeOffsetValue").val());
            if(isNaN(AltOffset)){
                throw "[ERROR] Input NaN";
            }
            $("#AltitudeOffsetStatus").css("color","green");
            $("#AltitudeOffsetStatus").text("[OK]");
            altitudeOffsetSwitch = true;
        }
        catch(e){
            $("#AltitudeOffsetStatus").css("color","red");
            $("#AltitudeOffsetStatus").text(e);
            
        }
    }
    
    session.subscribe({
        homogeneity: {tolerance: 0}, tlm: [
            {'name': '/CFS/PX4/VA_Q_0'},
            {'name': '/CFS/PX4/VA_Q_1'},
            {'name': '/CFS/PX4/VA_Q_2'},
            {'name': '/CFS/PX4/VA_Q_3'}
        ]
      },
      function (params) {
        for (var i = 0; i < params.length; ++i) {
          switch (params[i].id.name) {
            case '/CFS/PX4/VA_Q_0':
              Q[0] = params[i].engValue.floatValue;
              break;
              
            case '/CFS/PX4/VA_Q_1':
              Q[1] = params[i].engValue.floatValue;
              break;
              
            case '/CFS/PX4/VA_Q_2':
              Q[2] = params[i].engValue.floatValue;
              break;
              
            case '/CFS/PX4/VA_Q_3':
              Q[3] = params[i].engValue.floatValue;
              break;
          }
        }
        
        //var phi = Math.atan2((Q[2]*Q[3])+(Q[0]*Q[1]), 0.5 - (Q[1]*Q[1])-(Q[2]*Q[2]));
        //var theta = Math.asin(-2*((Q[1]*Q[3])-(Q[0]*Q[2])));
        //var psi = Math.atan2((Q[1]*Q[2])-(Q[0]*Q[3]),0.5-((Q[2]*Q[2])+(Q[3]*Q[3])));
        
        var phi = Math.atan2(2*((Q[2]*Q[3])+(Q[0]*Q[1])), 1.0-2.0*(Q[1]*Q[1])-(Q[2]*Q[2]));
        var t = 2.0 * (Q[0]*Q[2]+Q[1]*Q[3]);
        if(t>1){
        t = 1;
        }
        else if(t<-1){
        t = -1;
        }
        var theta =Math.asin(t);
        var psi = Math.atan2(2.0*((Q[1]*Q[2])+(Q[0]*Q[3])),1.0-2.0*((Q[2]*Q[2])+(Q[3]*Q[3])));
      
        Attitude.Pitch = theta;
        Attitude.Roll = (-1.0)*phi;
        Attitude.Yaw = psi;

        if (HUDStarted == false) {
          /* Skip the first one. */
          HUDStarted = true;
        } else {
          HUDCount++;
        }
        
        if (HUDStarted == true) {
          updateHUDHeading(Attitude.Yaw * 57.2958);
          updateHUDPitch(Attitude.Pitch * 57.2958);
          updateHUDRoll(Attitude.Roll * 57.2958);
        }
      }
    );
    
    session.subscribe({tlm: [{'name': '/CFS/PX4/VGP_Alt'}]}, function (param) {
        Position.Alt = param.engValue.floatValue;
        updateHUDAltitude(Position.Alt);
        //console.log("alt" + Position.Alt);
    });
      
    //setInterval(function () {
    //  if (HUDStarted == true) {
    //    updateHUDAltitude(Position.Alt);
    //  }
    //}, 50);

    //drawHUD();

    function updateHUDHeading(newHeading) {
      if(newHeading<0){
        newHeading = newHeading+360;
      } 
      //console.log('YAW',newHeading);
      textHeading.text(newHeading.toFixed(0).toString());
      hdTicks.x(-newHeading * pxPerDegree);
    }

    function updateHUDPitch(newPitch) {
      OffsetY = newPitch * pxPerDegreePitch;
      //pitchIndicator.rotate(0);
      //pitchIndicator.y(0);
      //pitchIndicator.animate(10, '-', 0).y(OffsetY).rotate(rotation);
    }

    function updateHUDRoll(newRoll) {
      rotation = newRoll;
      pitchIndicator.rotate(0);
      pitchIndicator.y(0);
      pitchIndicator.y(OffsetY).rotate(rotation);
    }

    function updateHUDAltitude(newAltitude) {
      if(AltOffset!=0){
        newAltitude = newAltitude + AltOffset;
      }  
      textAltitude.text(newAltitude.toFixed(1).toString());
      
      var upperBound = currentAltimeterCenter + 35;
      var lowerBound = currentAltimeterCenter - 5;
      if(newAltitude > upperBound - 3 || newAltitude < lowerBound + 3 || altitudeOffsetSwitch){
        console.log("report");
        altTicks.y(0 * altPxPerMeter);
        currentAltimeterCenter = parseInt(newAltitude);
        drawAltimeter()
        altitudeOffsetSwitch = false;
      } 
      else{
        altTicks.y(( newAltitude-currentAltimeterCenter) * altPxPerMeter);
      }
      
      //altTicks.y(newAltitude * altPxPerMeter);

    }
    drawHUD();

    $('#hud').on('load', function (event) {
      console.log("load");
      $('svg').remove();
      drawHUD();
      //drawAltimeter()

      //updateHUDAltitude(10);
      //updateHUDHeading(20);
      //updateHUDPitch(30);
      //updateHUDRoll(40);
    });

    $('#hud').on('resize', function (event) {
      console.log("Resized");
      $('svg').remove();
      drawHUD();
      //drawAltimeter()

      //updateHUDAltitude(10);
      //updateHUDHeading(20);
      //updateHUDPitch(30);
      //updateHUDRoll(40);
    });
    
    var toggle = 0;
    /* onload produce nosignam */

    //cameraImage.load('data:image/jpeg;base64,' + imageBuffer);
    $('input:checkbox').change(
        function(){
            if ($(this).is(':checked')) {
            
                session.subscribeToVideo(function(image) {
                  if(ctr==0){
                      prevTS = GetTime();
                  }
                  if(ctr%1000==0 && ctr!=0){
                      currTS = GetTime();
                      delta = currTS-prevTS;
                      fps = Math.round(1000/delta);
                      console.log("FPS : ",fps);
                      //console.log("FPS : ",fps);
                    
                      prevTS = GetTime();
                  }
                  imageBuffer = image;
                  cameraImage.load('data:image/jpeg;base64,' + imageBuffer);
                  ctr++;
                });
                
            }
            else{
                session.unSubscribeToVideo();
                cameraImage.load('ws/flight/logo.png', hudWidth, hudHeight);
            }
        }
    );

    function drawHUD() {
      var aspectRatio = 320.0 / 180.0;
      hudWidth = $('#hud').width();
      hudHeight = hudWidth / aspectRatio;
      if ($(window).height() < hudHeight) {
        hudHeight = $(window).height() - 50;
        hudWidth = hudHeight * aspectRatio;
      }
      draw = SVG('hud').size('100%', hudHeight);

      if (SVG.supported == false) {
        alert('SVG not supported with ths browser.');
      }
      else {
        bgOpacity = 0.5;
        var rect = draw.rect('100%', '100%').attr({fill: '#ffffff'});//background
        draw.attr('preserveAspectRatio', 'x320Y180 meet');

        /* -------------------------
         Draw the camera video
         ------------------------- */
        cameraImage = draw.image('ws/flight/logo.png', hudWidth, hudHeight);
        delete cameraImage;
        delete imageBuffer;

        var rollIndicator = draw.group();

        /* -------------------------
         Draw altimeter
         ------------------------- */
        var altWidth = 50;
        var altHeight = hudHeight - 10;
        var altHeight = hudHeight - 10;
        altPxPerMeter = altHeight / altPosMetersOnScreen; 
        var altPxPerDecimeter = altPxPerMeter / 10.0;
        var altPxPerCentimeter = altPxPerMeter / 100.0;
        var altPxPerMillimeter = altPxPerMeter / 1000.0;

        altimeter = draw.group();
        var altBorder = altimeter.group();
        /* Draw border. */
        var altRec1 = altBorder.rect(altWidth, altHeight).attr({
          x: hudWidth - altWidth - 5,
          y: 5,
          stroke: '#000000',
          'stroke-width': '3px',
          rx: 5,
          ry: 5,
          'fill-opacity': bgOpacity
        });
        var altRec2 = altBorder.rect(altWidth, altHeight).attr({
          x: hudWidth - altWidth - 5,
          y: 5,
          stroke: '#00ff00',
          rx: 5,
          ry: 5,
          'fill-opacity': bgOpacity
        });
        /* Draw ticks group. */
        altTicksArea = altimeter.group();
        altTicks = altTicksArea.group();
        //console.log('test');
        for (i = 0; i < (10 * (altPosMetersOnScreen + 1 + 30)); i++) {
          y = (hudHeight / 2) - i * (altPxPerDecimeter); //y co ordinate of major tick
          /* Draw a longer line if its a meter interval. */
          if (i % 10 == 0) {
            altTicks.line(hudWidth - altWidth - 3, y, hudWidth - altWidth + 20, y).attr({
              width: 2,
              stroke: '#00ff00'
            });

            var textAltTick = altTicks.text((i / 10.0).toString()).move(hudWidth - altWidth + 22, y - 3);
            textAltTick.font({
              fill: '#00ff00',
              anchor: 'start',
              size: 11
            });
          }
          else {
            /* This is just a decimeter tick. */
            altTicks.line(hudWidth - altWidth - 3, y, hudWidth - altWidth + 10, y).attr({
              width: 1,
              stroke: '#00ff00'
            });
          }
        }
        for (i = 0; i > (-10 * (altPosMetersOnScreen + 1)); i--) {
          y = (hudHeight / 2) - i * (altPxPerDecimeter);
          /* Draw a longer line if its a meter interval. */
          if (i % 10 == 0) {
            altTicks.line(hudWidth - altWidth - 3, y, hudWidth - altWidth + 20, y).attr({
              width: 2,
              stroke: '#00ff00'
            });

            var textAltTick = altTicks.text((i / 10.0).toString()).move(hudWidth - altWidth + 22, y - 3);
            textAltTick.font({
              fill: '#00ff00',
              anchor: 'start',
              size: 11
            });
          }
          else {
            /* This is just a decimeter tick. */
            altTicks.line(hudWidth - altWidth - 3, y, hudWidth - altWidth + 10, y).attr({
              width: 1,
              stroke: '#00ff00'
            });
          }
        }
        /* Draw center altitude indicator. */
        var altCenter = altimeter.group();
        var altCenterHeight = 30;
        altCenter.polyline([
          [hudWidth - altWidth - 5, hudHeight / 2],
          [hudWidth - altWidth + 15, (hudHeight - altCenterHeight) / 2],
          [hudWidth - 5, (hudHeight - altCenterHeight) / 2],
          [hudWidth - 5, (hudHeight + altCenterHeight) / 2],
          [hudWidth - altWidth + 15, (hudHeight + altCenterHeight) / 2],
          [hudWidth - altWidth - 5, hudHeight / 2]]).attr({
          stroke: '#000000',
          'stroke-width': 3,
          'fill-opacity': 0.0
        });
        altCenter.polyline([
          [hudWidth - altWidth - 5, hudHeight / 2],
          [hudWidth - altWidth + 15, (hudHeight - altCenterHeight) / 2],
          [hudWidth - 5, (hudHeight - altCenterHeight) / 2],
          [hudWidth - 5, (hudHeight + altCenterHeight) / 2],
          [hudWidth - altWidth + 15, (hudHeight + altCenterHeight) / 2],
          [hudWidth - altWidth - 5, hudHeight / 2]]).attr({
          stroke: '#00ff00',
          'stroke-width': 2,
          'fill-opacity': 0.0
        });
        textAltitude = altCenter.text('0.0').move(hudWidth - altWidth + 12, (hudHeight / 2)-2);
        //textAltitude.attr("dominant-baseline", "middle");
        textAltitude.font({
          fill: '#00ff00',
          size: 12,
        });
        var altTicksMask = altimeter.mask();
        altTicksMask.rect(hudWidth, hudHeight).attr({
          fill: '#000000'
        });
        altTicksMask.rect(altWidth, altHeight).attr({
          x: hudWidth - altWidth - 5,
          y: 5,
          fill: '#ffffff',
          'stroke-width': '3px',
          rx: 5,
          ry: 5
        });
        altTicksMask.polyline([
          [hudWidth - altWidth - 5, hudHeight / 2],
          [hudWidth - altWidth + 15, (hudHeight - altCenterHeight) / 2],
          [hudWidth - 5, (hudHeight - altCenterHeight) / 2],
          [hudWidth - 5, (hudHeight + altCenterHeight) / 2],
          [hudWidth - altWidth + 15, (hudHeight + altCenterHeight) / 2],
          [hudWidth - altWidth - 5, hudHeight / 2]]).attr({
          fill: '#000000'
        });
        altTicksArea.maskWith(altTicksMask);

        /* -------------------------
         Draw Heading
         ------------------------- */
        var hdHeight = 50;
        hdWidth = hudWidth - 120;
        pxPer15Degrees = (hdWidth / 2) / 5;
        pxPerDegree = pxPer15Degrees / 15.0;
        var heading = draw.group();
        var headingBorder = heading.group();
        /* Draw border. */
        var hdRec1 = headingBorder.rect(hdWidth, hdHeight).attr({
          x: (hudWidth - hdWidth) / 2,
          y: hudHeight - hdHeight - 5,
          stroke: '#000000',
          'stroke-width': '3px',
          rx: 5,
          ry: 5,
          'fill-opacity': bgOpacity
        });
        var hdRec2 = headingBorder.rect(hdWidth, hdHeight).attr({
          x: (hudWidth - hdWidth) / 2,
          y: hudHeight - hdHeight - 5,
          stroke: '#00ff00',
          'stroke-width': '1px',
          rx: 5,
          ry: 5,
          'fill-opacity': bgOpacity
        });
        /* Draw ticks group. */
        hdTicksArea = heading.group();
        hdTicks = hdTicksArea.group();
        for (i = 0; i < (360 + 90); i++) {
          if (i % 15 == 0) {
            x = ((hudWidth) / 2) + (pxPerDegree * i);
            hdTicks.line(x, hudHeight - hdHeight - 3, x, hudHeight - hdHeight + 10).attr({
              width: 1,
              stroke: '#00ff00'
            });

            var fixedHeading = i;
            if (i < 0) {
              fixedHeading = 360 + i;
            }
            else if (i >= 360) {
              fixedHeading = i - 360;
            }

            var textHeadingTick = hdTicks.text(fixedHeading.toString()).move(x, hudHeight - hdHeight + 13);
            textHeadingTick.font({
              fill: '#00ff00',
              anchor: 'middle',
              size: 13
            });
          }
        }
        for (i = 0; i > (-360 - 90); i--) {
          if (i % 15 == 0) {
            x = ((hudWidth) / 2) + (pxPerDegree * i);
            hdTicks.line(x, hudHeight - hdHeight - 3, x, hudHeight - hdHeight + 10).attr({
              width: 1,
              stroke: '#00ff00'
            });

            var fixedHeading = i;
            if (i < 0) {
              fixedHeading = 360 + i;
            }
            else if (i >= 360) {
              fixedHeading = i - 360;
            }

            var textHeadingTick = hdTicks.text(fixedHeading.toString()).move(x, hudHeight - hdHeight + 13);
            textHeadingTick.font({
              fill: '#00ff00',
              anchor: 'middle',
              size: 13
            });
          }
        }
        /* Draw center heading indicator. */
        var hdCenter = heading.group();
        var hdCenterWidth = 60;
        hdCenter.polyline([
          [hudWidth / 2, hudHeight - hdHeight - 5],
          [(hudWidth + 20) / 2, hudHeight - hdHeight + 10],
          [(hudWidth + hdCenterWidth) / 2, hudHeight - hdHeight + 10],
          [(hudWidth + hdCenterWidth) / 2, hudHeight - 5],
          [(hudWidth - hdCenterWidth) / 2, hudHeight - 5],
          [(hudWidth - hdCenterWidth) / 2, hudHeight - hdHeight + 10],
          [(hudWidth - 20) / 2, hudHeight - hdHeight + 10],
          [hudWidth / 2, hudHeight - hdHeight - 5]]).attr({
          stroke: '#000000',
          'stroke-width': 3,
          'fill-opacity': 0.0
        });
        hdCenter.polyline([
          [hudWidth / 2, hudHeight - hdHeight - 5],
          [(hudWidth + 20) / 2, hudHeight - hdHeight + 10],
          [(hudWidth + hdCenterWidth) / 2, hudHeight - hdHeight + 10],
          [(hudWidth + hdCenterWidth) / 2, hudHeight - 5],
          [(hudWidth - hdCenterWidth) / 2, hudHeight - 5],
          [(hudWidth - hdCenterWidth) / 2, hudHeight - hdHeight + 10],
          [(hudWidth - 20) / 2, hudHeight - hdHeight + 10],
          [hudWidth / 2, hudHeight - hdHeight - 5]]).attr({
          stroke: '#00ff00',
          'stroke-width': 2,
          'fill-opacity': 0.0
        });
        textHeading = draw.text('0').move((hudWidth / 2), hudHeight - hdHeight + 13);
        textHeading.font({
          fill: '#00ff00',
          anchor: 'middle',
          size: 23
        });

        hdTicksMask = heading.mask();

        hdTicksMask.rect(hudWidth, hudHeight).attr({
          fill: '#000000'
        });
        hdTicksMask.rect(hdWidth, hdHeight).attr({
          x: (hudWidth - hdWidth) / 2,
          y: hudHeight - hdHeight - 5,
          stroke: '#00ff00',
          'stroke-width': '1px',
          rx: 5,
          ry: 5,
          fill: '#ffffff'
        });
        hdTicksMask.polyline([
          [hudWidth / 2, hudHeight - hdHeight - 5],
          [(hudWidth + 20) / 2, hudHeight - hdHeight + 10],
          [(hudWidth + hdCenterWidth) / 2, hudHeight - hdHeight + 10],
          [(hudWidth + hdCenterWidth) / 2, hudHeight - 5],
          [(hudWidth - hdCenterWidth) / 2, hudHeight - 5],
          [(hudWidth - hdCenterWidth) / 2, hudHeight - hdHeight + 10],
          [(hudWidth - 20) / 2, hudHeight - hdHeight + 10],
          [hudWidth / 2, hudHeight - hdHeight - 5]]).attr({
          fill: '#000000'
        });
        hdTicksArea.maskWith(hdTicksMask);

        /* -------------------------
         Draw horizon
         ------------------------- */
        hrzWidth = (hudWidth - altWidth) * 0.3;
        var hrzInterval;
        var horizonArea = draw.group();
        pxPerPitchLine = ((hudWidth / 2) / posPitchLineOnScreen);
        pxPerDegreePitch = pxPerPitchLine / degPerPitchLine;
        pitchIndicator = horizonArea.group();

        for (i = 0; i <= 90; i++) {
          if (i % degPerPitchLine == 0) {
            y = ((hudHeight) / 2) - (pxPerDegreePitch * i);

            if (i > 0) {
              pitchIndicator.polyline([
                [(hudWidth - hrzWidth) / 2, y],
                [(hudWidth - (hrzWidth * 0.10)) / 2, y],
                [hudWidth / 2, y + (hrzWidth * 0.05)],
                [(hudWidth + (hrzWidth * 0.10)) / 2, y],
                [(hudWidth + hrzWidth) / 2, y]]).attr({
                'stroke-width': 3,
                'fill-opacity': 0.0,
                stroke: '#000000'
              });
              pitchIndicator.polyline([
                [(hudWidth - hrzWidth) / 2, y],
                [(hudWidth - (hrzWidth * 0.10)) / 2, y],
                [hudWidth / 2, y + (hrzWidth * 0.05)],
                [(hudWidth + (hrzWidth * 0.10)) / 2, y],
                [(hudWidth + hrzWidth) / 2, y]]).attr({
                'stroke-width': 2,
                'fill-opacity': 0.0,
                stroke: '#00ff00'
              });

              var fixedPitch = i;
              if (i > 90) {
                fixedPitch = 180 - i;
              }

              pitchIndicator.rect(20, 20).attr({
                fill: '#000000',
                x: (hudWidth - hrzWidth) / 2 - 22,
                y: y - 10,
                'fill-opacity': bgOpacity,
              });
              var leftTextPitchLine = pitchIndicator.text(fixedPitch.toString()).move((hudWidth - hrzWidth) / 2 - 5, y - 7);
              leftTextPitchLine.font({
                fill: '#00ff00',
                anchor: 'end',
                size: 15,
              });

              pitchIndicator.rect(20, 20).attr({
                fill: '#000000',
                x: (hudWidth + hrzWidth) / 2 + 3,
                y: y - 10,
                'fill-opacity': bgOpacity,
              });
              var rightTextPitchLine = pitchIndicator.text(fixedPitch.toString()).move((hudWidth + hrzWidth) / 2 + 5, y - 7);
              rightTextPitchLine.font({
                fill: '#00ff00',
                anchor: 'start',
                size: 15,
              });
            }
            else {
              pitchIndicator.line(-hudWidth, y, 2 * hudWidth, y).attr({
                'stroke-width': 3,
                stroke: '#000000'
              });
              pitchIndicator.line(-hudWidth, y, 2 * hudWidth, y).attr({
                'stroke-width': 2,
                stroke: '#00ff00'
              });
            }
          }
        }

        for (i = 0; i >= -90; i--) {
          if (i % degPerPitchLine == 0) {
            y = ((hudHeight) / 2) - (pxPerDegreePitch * i);

            if (i < 0) {
              pitchIndicator.polyline([
                [(hudWidth - hrzWidth) / 2, y],
                [(hudWidth - (hrzWidth * 0.10)) / 2, y],
                [hudWidth / 2, y - (hrzWidth * 0.05)],
                [(hudWidth + (hrzWidth * 0.10)) / 2, y],
                [(hudWidth + hrzWidth) / 2, y]]).attr({
                'stroke-width': 3,
                'fill-opacity': 0.0,
                stroke: '#000000'
              });
              pitchIndicator.polyline([
                [(hudWidth - hrzWidth) / 2, y],
                [(hudWidth - (hrzWidth * 0.10)) / 2, y],
                [hudWidth / 2, y - (hrzWidth * 0.05)],
                [(hudWidth + (hrzWidth * 0.10)) / 2, y],
                [(hudWidth + hrzWidth) / 2, y]]).attr({
                'stroke-width': 2,
                'fill-opacity': 0.0,
                stroke: '#00ff00'
              });

              var fixedPitch = i;
              if (i < -90) {
                fixedPitch = -180 - i;
              }

              pitchIndicator.rect(25, 20).attr({
                fill: '#000000',
                x: (hudWidth - hrzWidth) / 2 - 27,
                y: y - 10,
                'fill-opacity': bgOpacity,
              });
              var leftTextPitchLine = pitchIndicator.text(fixedPitch.toString()).move((hudWidth - hrzWidth) / 2 - 5, y - 7);
              leftTextPitchLine.font({
                fill: '#00ff00',
                anchor: 'end',
                size: 15,
              });

              pitchIndicator.rect(25, 20).attr({
                fill: '#000000',
                x: (hudWidth + hrzWidth) / 2 + 3,
                y: y - 10,
                'fill-opacity': bgOpacity,
              });
              var rightTextPitchLine = pitchIndicator.text(fixedPitch.toString()).move((hudWidth + hrzWidth) / 2 + 5, y - 7);
              rightTextPitchLine.font({
                fill: '#00ff00',
                anchor: 'start',
                size: 15,
              });
            }
          }
        }

        hrzMask = pitchIndicator.mask();
        hrzMask.rect(hudWidth, hudHeight).attr({
          fill: '#000000'
        });
        hrzMask.rect(hudWidth - altWidth - 20, hudHeight - hdHeight - 20).attr({
          fill: '#ffffff',
          x: 5,
          y: 5
        });
        horizonArea.maskWith(hrzMask);
      }
    }

    var pitchDirection = 0.2;
    var altitudeDirection = 0.01;

     
    function drawAltimeter(){
      var pc = 0;
      var nc = 0;
      altTicks.node.childNodes.forEach(function(e){
        if(e.nodeName == "text"){
          var spn  = e.firstChild;
          if(pc<=35){
            spn.firstChild.nodeValue = String(currentAltimeterCenter+pc);
            //console.log(spn.firstChild,currentAltimeterCenter+pc,nc,pc);
            pc++;
          }
          else{
            spn.firstChild.nodeValue = String(currentAltimeterCenter-nc);
            //console.log(spn.firstChild,currentAltimeterCenter-nc,nc,pc);
            nc++;
            pc++;
          }
        }
        });
    }
