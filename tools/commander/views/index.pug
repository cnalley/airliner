cdr-nav-iconshtml(lang='en-us')
  head
    meta(charset='utf-8')
    meta(http-equiv="X-UA-Compatible" content="IE=edge,chrome=1")
    meta(name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0")
    title Commander
    <!-- JS Libraries -->
    script(type="text/javascript" src="/scripts/popper.js/dist/umd/popper.min.js")
    script(type="text/javascript" src="/scripts/jquery/dist/jquery.js")
    script(type="text/javascript" src="/scripts/jquery-ui-dist/jquery-ui.min.js")
    script(type="text/javascript" src="/scripts/bootstrap/dist/js/bootstrap.min.js")
    script(type="text/javascript" src="/scripts/bootstrap-colorpicker/dist/js/bootstrap-colorpicker.min.js")
    script(type="text/javascript" src="/scripts/patternfly-bootstrap-treeview/dist/bootstrap-treeview.min.js")
    script(type="text/javascript" src="/scripts/svg.js/dist/svg.js")
    script(type="text/javascript" src='/scripts/wolfy87-eventemitter/EventEmitter.js')
    <!-- script(type="text/javascript" src='/scripts/socket.io-client/dist/socket.io.js') -->
    <!-- Backup socket io path -->
    script(type="text/javascript" src='/scripts/socket.io/node_modules/socket.io-client/dist/socket.io.js')
    script(type="text/javascript" src='/scripts/golden-layout/dist/goldenlayout.min.js')
    script(type="text/javascript" src="/scripts/overlayscrollbars/js/jquery.overlayScrollbars.min.js")
    script(type="text/javascript" src="/scripts/jquery.flot/excanvas.min.js")
    script(type="text/javascript" src="/scripts/jquery.flot/jquery.colorhelpers.js")
    script(type="text/javascript" src="/scripts/jquery.flot/jquery.flot.js")
    script(type="text/javascript" src="/scripts/jquery.flot/jquery.flot.time.js")
    script(type="text/javascript" src="/scripts/jquery.flot/jquery.flot.resize.js")
    script(type="text/javascript" src='/scripts/cesium/Build/CesiumUnminified/Cesium.js')
    script(type="text/javascript" src="/scripts/file-saver/FileSaver.min.js")
    script(type="text/javascript" src="/scripts/sprintf-js/dist/sprintf.min.js")
    script(type="text/javascript" src="/scripts/sparklines/source/sparkline.js")
    script(type="text/javascript" src="/scripts/jquery-contextmenu/dist/jquery.contextMenu.min.js")
    script(type="text/javascript" src="/scripts/handlebars/dist/handlebars.min.js")
    script(type="text/javascript" src="/scripts/d3/dist/d3.min.js")
    
    <!-- script(type="text/javascript" src="http://d3js.org/d3.v3.js") -->
    <!-- script(type="text/javascript" src="/scripts/radar-chart-d3/src/radar-chart.js") -->
    
    <!-- CSS Libraries -->
    link(rel="stylesheet" type="text/css" href="/scripts/jquery-ui-dist/jquery-ui.min.css")
    link(rel="stylesheet" type="text/css" href="/scripts/overlayscrollbars/css/OverlayScrollbars.min.css")
    link(rel="stylesheet" type="text/css" href="/scripts/patternfly-bootstrap-treeview/dist/bootstrap-treeview.min.css")
    link(rel="stylesheet" type="text/css" href="/scripts/bootstrap/dist/css/bootstrap.min.css")
    link(rel="stylesheet" type="text/css" href="/scripts/bootstrap-colorpicker/dist/css/bootstrap-colorpicker.min.css")
    link(rel="stylesheet" type="text/css" href="/css/commander.css")
    link(rel="stylesheet" type="text/css" href="/scripts/font-awesome/css/font-awesome.min.css")
    link(type="text/css" rel="stylesheet" href="/css/goldenlayout-base.css")
    link(type="text/css" rel="stylesheet" href="/css/goldenlayout-dark-theme.css")  
    link(type="text/css" rel="stylesheet" href="/scripts/cesium/Source/Widgets/widgets.css")
    link(type="text/css" rel="stylesheet" href="/scripts/jquery-contextmenu/dist/jquery.contextMenu.min.css")  
  body
    <!-- Generic Modal Template -->
    div#genericInputModal.modal.fade(tabindex="-1" role="dialog" aria-labelledby="genericInputModal" aria-hidden="true")
      div.modal-dialog(role="document")
        div.modal-content
          div.modal-header
            h5.modal-title#modalTitle Title Placeholder
            button(type="button" class="close" data-dismiss="modal" aria-label="Close" style="color:white")
              span(aria-hidden="true") &times;
          div.modal-body
            form#modalForm
          div.modal-footer
            button#modalSubmit.btn.btn-outline-primary(type="submit" data-dismiss="modal") OK
            button.btn.btn-outline-secondary(type="button" data-dismiss="modal") Close    
    <!-- Top Navigation Bar -->
    nav.cdr-nav-top.navbar.fixed-top.navbar-expand-lg.navbar-dark.bg-dark
      button.cdr-xs-nav-toggle.navbar-toggler(type="button" data-toggle="collapse" data-target="#cdr-nav-top-left-content" aria-controls="cdr-nav-top-left-content" aria-expanded="false" aria-label="Toggle navigation")
        span.navbar-toggler-icon
      button.cdr-xs-nav-toggle.navbar-toggler(type="button" data-toggle="collapse" data-target="#cdr-nav-top-right-content" aria-controls="cdr-nav-top-right-content" aria-expanded="false" aria-label="Toggle navigation")
        span.navbar-toggler-icon
      #cdr-nav-top-left-content.collapse.navbar-collapse
        ul.navbar-nav.cdr-nav-btn
          button#cdr-app-menu-toggle.btn.btn-outline-primary(data-tooltip='true' title='Open/Close Menus')
            i.cdr-nav-icons.fa.fa-bars
        ul.navbar-nav.cdr-nav-btn
          i#cdr-voice-cmd.cdr-nav-icons.fa.fa-microphone
        ul#cdr-well-top-left.navbar-nav.cdr-well
        ul.navbar-nav.ml-auto
      a.cdr-nav-top-brand.navbar-brand(href="#")
        img(src="/img/Windhover-Mark-White.png" width="50" class="d-inline-block align-top" alt="")
      #cdr-nav-top-right-content.collapse.navbar-collapse
        ul.navbar-nav.ml-auto
        ul#cdr-well-top-right.navbar-nav.cdr-well
        ul.navbar-nav.cdr-nav-btn(data-tooltip='true' title='Load Layout')
          button.btn.btn-outline-primary( data-toggle="modal" data-target="#genericInputModal" data-title="Load Layout" data-submit="LoadLayout" data-custom='[{"label":"Select Layout", "type":"browse", "dtype":"none", "getItem":"GetStoredLayoutList"}]') 
            i.cdr-nav-icons.fa.fa-download
        ul.navbar-nav.cdr-nav-btn(data-tooltip='true' title='Save Layout')
          button.btn.btn-outline-primary(data-toggle="modal" data-target="#genericInputModal" data-title="Save Layout" data-submit="SaveLayout" data-custom='[{"label":"Enter Layout Name ", "type":"field", "dtype":"text"}]') 
            i.cdr-nav-icons.fa.fa-save
        <!--ul.navbar-nav.cdr-nav-btn#noop-test -->
        <!--  button.btn.btn-outline-primary(data-cdr={cmd:{name:'/CFE/CFE_ES_NoopCmd'},indicator:'cmd'}) -->
        <!--    i.cdr-nav-icons No-Op -->

    <!-- Central Content Area -->
    div.cdr-container.ui.main.text
      div.cdr-content-wrapper
        div#cdr-layout-container
        div#cdr-app-menu 
          div#cdr-panel-layout-switch.cdr-center-btn-group.btn-group(role="group" aria-label="Toggle Menus")
            button#cdr-layout-menu-toggle.btn.cdr-outline-primary.active(data-tooltip='true' title='A layout(collection of webpages) directory') Layout
            button#cdr-panel-menu-toggle.btn.cdr-outline-primary(data-tooltip='true' title='A webpage directory') Panels
            button#cdr-widget-menu-toggle.btn.cdr-outline-primary(data-tooltip='true' title='A widget directory') Widgets
          div#cdr-panel-menu-container.cdr-menu-container(data-open="false")
          div#cdr-layout-menu-container.cdr-menu-container.menuShow(data-open="true")
          div#cdr-widget-menu-container.cdr-menu-container(data-open="false")
    <!-- Bottom Navigation Bar -->
    nav#cdr-nav-btm.navbar.fixed-bottom.navbar-expand-lg.navbar-dark.bg-dark
      ul.navbar-nav#cdr-btm-nav-utility
        a#cdr-docs-container(onclick='showDocumentation()')
          i.fa.fa-file
      ul.navbar-nav.mr-auto
      ul#cdr-well-top-bottom.navbar-nav.cdr-well
    
    <!-- Custom Scripts -->
    
    script(type="text/javascript").
      
      var targetNodes         = $("body");
      var MutationObserver    = window.MutationObserver || window.WebKitMutationObserver;
      var myObserver          = new MutationObserver (mutationHandler);
      var obsConfig           = { childList: true, characterData: true, attributes: true, subtree: true };

      //--- Add a target node to the observer. Can only add one node at a time.
      targetNodes.each ( function () {
        myObserver.observe (this, obsConfig);
      });

      var CommanderTlmDataElements = [];
      
      function mutationHandler (mutationRecords) {
        mutationRecords.forEach ( function (mutation) {
          if (typeof mutation.addedNodes == "object" && mutation.addedNodes.length > 0) {
            var jq = $(mutation.addedNodes);
            jq.find('[data-cdr]').each(function () {
              var obj = $(this).attr('data-cdr');
              
              var jsonObj;
              if (typeof obj === 'string' || obj instanceof String) {
                // it's a string
                jsonObj = JSON.parse(obj);
              }
              else if (typeof obj === 'object' || obj instanceof Object) {
                // it's an object
                jsonObj = obj;
              }
              else {
                // it's something else
                return;
              }
              
              if (jsonObj.hasOwnProperty('tlm')) {
                /* This is a telemetry object. */
                session.subscribe(jsonObj.tlm, processTelemetryUpdate);
                //session.getTlmInfo(jsonObj,processTlmInfo);
                CommanderTlmDataElements.push($(this));
              }
              if (jsonObj.hasOwnProperty('cmd')) {
                /* This is a command object. */
                var cmdObj = jsonObj.cmd;
                var btnObj = $(this);
                session.getCmdDef({name:cmdObj.name}, function (cmdInfo) {
                  if (cmdObj.hasOwnProperty('uuid')) {
                    /* We already bound this element. */
                  } else {
                    var uuid = generateUUID();
                    cmdInfo.uuid = uuid;
                    cmdObj.uuid = uuid;
                    btnObj.attr('data-sage', JSON.stringify(jsonObj));
                    /* Copy any arguments we have from the command button into the cmdInfo struct. */
                    if (cmdObj.hasOwnProperty('argument')) {
                      for (i = 0; i < cmdObj.argument.length; i++) {
                        for (j = 0; j < cmdInfo.argument.length; j++) {
                          if (cmdInfo.argument[j].name == cmdObj.argument[i].name) {
                            cmdInfo.argument[j].value = cmdObj.argument[i].value;
                          }
                        }
                      }
                    };
                      
                    if ( isTemplateCommand( cmdInfo ) == false ) {
                      console.log('Template');
                      /*
                       * This is a fully instantiated command. No need to
                       * create a popup form. Just send the command when
                       * the user clicks the button.
                       */
                      var args = {};
                      if ( cmdInfo.hasOwnProperty( 'argument' ) ) {
                        for ( var i = 0; i < cmdInfo.argument.length; i++ ) {
                          args[ cmdInfo.argument[ i ].name ] = cmdInfo.argument[ i ].value
                        }
                      }
                      btnObj[ 0 ].onclick = function( eventObject ) {
                        session.sendCommand( {
                          ops_path: cmdInfo.name,
                          args: args
                        });
                      };
                    } else {







                      /*
                       * This is not a fully instantiated command. We need
                       * to present a popup form to allow the user to
                       * enter the remaining command arguments before
                       * sending the command.
                       *
                       * First, generate UUIDs to be used later as element
                       * IDs.
                       */
                      for ( i = 0; i < cmdInfo.argument.length; i++ ) {
                        cmdInfo.argument[ i ].uuid = uuid + "_" + cmdInfo.argument[ i ].name;
                      }
                      /*
                       * Next set stringLength for string parameters to be
                       * used for form validation later.
                       */
                      for ( i = 0; i < cmdInfo.argument.length; i++ ) {
                        if ( cmdInfo.argument[ i ].type === 'string' ) {
                          /*
                           * Add a new stringLength (in bytes)
                           * attribute for parameter validation later.
                           */
                          cmdInfo.argument[ i ].stringLength = cmdOut.argument[ i ].bitSize / 8;
                        }
                      }
      
                      /* Make button fire modal */
                      btnObj.attr( 'data-toggle', 'modal' );
                      btnObj.attr( 'data-target', '#genericInputModal' );
                      btnObj.attr( 'data-title', 'Submit ' + cmdInfo.name + ' Arguments' );
                      btnObj.attr( 'data-submit', 'sendCmd' );
                      var argArray = [];
      
                      for ( var i in cmdInfo.argument ) {
                        var label = cmdInfo.argument[ i ].name;
                        var type = cmdInfo.argument[ i ].type;
                        var value = cmdInfo.argument[ i ].value;
                        switch ( type ) {
                          case 'char':
                            {
                              /* integer action */
                              argArray.push( {
                                'label': label,
                                'type': 'field',
                                'dtype': 'text',
                                'value': value
                              } );
                              break;
                            }
      
                          case 'uint8':
                            {
                              /* integer action */
                              argArray.push( {
                                'label': label,
                                'type': 'field',
                                'dtype': 'integer',
                                'value': value
                              } );
                              break;
                            }
      
                          case 'int8':
                            {
                              /* integer action */
                              argArray.push( {
                                'label': label,
                                'type': 'field',
                                'dtype': 'integer',
                                'value': value
                              } );
                              break;
                            }
      
                          case 'string':
                            {
                              /* integer action */
                              argArray.push( {
                                'label': label,
                                'type': 'field',
                                'dtype': 'text',
                                'value': value
                              } );
                              break;
                            }
      
                          case 'uint16':
                            {
                              /* integer action */
                              argArray.push( {
                                'label': label,
                                'type': 'field',
                                'dtype': 'text',
                                'value': value
                              } );
                              break;
                            }
      
                          case 'int16':
                            {
                              /* integer action */
                              argArray.push( {
                                'label': label,
                                'type': 'field',
                                'dtype': 'text',
                                'value': value
                              } );
                              break;
                            }
      
                          case 'uint32':
                            {
                              /* integer action */
                              argArray.push( {
                                'label': label,
                                'type': 'field',
                                'dtype': 'text',
                                'value': value
                              } );
                              break;
                            }
      
                          case 'int32':
                            {
                              /* integer action */
                              argArray.push( {
                                'label': label,
                                'type': 'field',
                                'dtype': 'text',
                                'value': value
                              } );
                              break;
                            }
      
                          case 'float':
                            {
                              /* integer action */
                              argArray.push( {
                                'label': label,
                                'type': 'field',
                                'dtype': 'float',
                                'value': value
                              } );
                              break;
                            }
      
                          case 'double':
                            {
                              /* integer action */
                              argArray.push( {
                                'label': label,
                                'type': 'field',
                                'dtype': 'float',
                                'value': value
                              } );
                              break;
                            }
      
                          case 'boolean':
                            {
                              /* integer action */
                              argArray.push( {
                                'label': label,
                                'type': 'field',
                                'dtype': 'integer',
                                'value': value
                              } );
                              break;
                            }
      
                          case 'uint64':
                            {
                              /* integer action */
                              argArray.push( {
                                'label': label,
                                'type': 'field',
                                'dtype': 'text',
                                'value': value
                              } );
                              break;
                            }
      
                          case 'int64':
                            {
                              /* integer action */
                              argArray.push( {
                                'label': label,
                                'type': 'field',
                                'dtype': 'text',
                                'value': value
                              } );
                              break;
                            }
      
      
                        }
                        btnObj.attr( 'data-custom', JSON.stringify( argArray ) );
                      }








                    }
                  }
                });
              };
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
            });
          }
        });
      };      
      
      var processTelemetryUpdate = function (param) {
        var found = false;
        for (var k = 0; k < param.length; k++) {
          for (var i = 0; i < CommanderTlmDataElements.length; i++) {
            var jsonObj = JSON.parse(CommanderTlmDataElements[i].attr('data-cdr'));
            for (var j = 0; j < jsonObj.tlm.length; j++) {
              var tlmObj = CommanderTlmDataElements[i];
              if (jsonObj.tlm[j].name == param[k].opsPath) {
                found = true;
                if(typeof param[k].sample !== 'undefined') {
                  var value = param[k].sample[0].value;
	                
                  if(tlmObj.hasClass('bool-led')) {
                    if(value > 0) {
                      BoolLedEnable(tlmObj);
                    } else {
                      BoolLedDisable(tlmObj);
                    }
                    value = '';
                  }
	                
                  if(tlmObj.hasClass('format-microseconds')){
                    value = GetFormattedSystemTimeInMicroseconds(param.engValue.uint32Value)
                  } 
	
                  if(tlmObj.is(':checkbox')) {
                    if((value == true) || (value > 0.0))
                      tlmObj.prop( 'checked', true );
                    else
                      tlmObj.prop( 'checked', false );
                  }
	                
                  if(tlmObj.is('input')) {
                    tlmObj.prop('value', value );
                  } 
	                  
                  if(jsonObj.tlm[j].hasOwnProperty('format')) {
                    value = sprintf(jsonObj.tlm[j].format, value);
                  } 
	                           
                  if((tlmObj.hasClass('display-units') || !tlmObj.hasClass('no-display-units')) &&
                    !tlmObj.hasClass('format-microseconds')) {
                    if(tlmObj[0].hasAttribute('data-units')) {
                      value = value + ' ' + tlmObj[0].getAttribute('data-units');
                    }
                  }
                    
                  tlmObj.text(value);
                }
              }
            }
          }
          
          if (found == false) {
            session.unsubscribe({tlm:[{'name':param[k].opsPath}]});
          }
        }
      };

      function isTemplateCommand(commandInfo) {
        var found = false;
        if(commandInfo.hasOwnProperty('argument')){
          if(commandInfo.argument.length > 0){
            /* Look for at least 1 unspecified value. */
            for(i=0; i < commandInfo.argument.length; i++){
              if(!commandInfo.argument[i].hasOwnProperty('value')){
                found = true;
              }
            }
          }
        }
        return found;
      }
      
      var GetFormattedSystemTimeInMicroseconds = function(inTime) {
        hours = Math.floor(inTime / (1000000*60*60))
        remainder = inTime - (hours * (1000000*60*60))
        minutes = Math.floor(remainder / (1000000*60))
        remainder = remainder - (minutes * (1000000*60))
        seconds = remainder / 1000000.0
        
        if(minutes < 10.0) {
          strMinutes = '0' + minutes
        } else {
          strMinutes = minutes
        }
        if(seconds < 10.0) {
          strSeconds = '0' + seconds
        } else {
          strSeconds = seconds
        }
        
        value = '' + hours + ':' + strMinutes + ':' + strSeconds
        return value
      }
      
      var BoolLedEnable = function(tlmObj) {
          tlmObj.removeClass('bool-led-off')
          tlmObj.addClass('bool-led-on')
          if(tlmObj.hasClass('bool-led-error')) {
              tlmObj.addClass('bool-led-on-error')
          }
          else if(tlmObj.hasClass('bool-led-warn')) {
              tlmObj.addClass('bool-led-on-warn')
          } else {
              tlmObj.addClass('bool-led-on-info')
          }
      }
      
      var BoolLedDisable = function(tlmObj) {
          tlmObj.removeClass('bool-led-on')
          tlmObj.addClass('bool-led-off')
          if(tlmObj.hasClass('bool-led-error')) {
              tlmObj.removeClass('bool-led-on-error')
          }
          else if(tlmObj.hasClass('bool-led-warn')) {
              tlmObj.removeClass('bool-led-on-warn')
          } else {
              tlmObj.removeClass('bool-led-on-info')
          }
      }
      
      var generateUUID = function(){
        var d = new Date().getTime();
        if(window.performance && typeof window.performance.now === "function"){
          d += performance.now(); //use high-precision timer if available
        }
        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
          var r = (d + Math.random()*16)%16 | 0;
          d = Math.floor(d/16);
          return (c=='x' ? r : (r&0x3|0x8)).toString(16);
        });
        return uuid;
      }
      
      /**
       * Some command invoke a modal or a form to be filled out by the user. The
       * submit action of that form will invoke this function. THis function scrapes
       * the modal for form information and generates a complete command object and
       * sends it out.
       * @return {undefined}
       */
      function sendCmd() {
        var args = {};
        var labels = $( "#genericInputModal" ).find( 'label' );
        for ( var i = 0; i < labels.length; ++i ) {
          var label = labels[ i ].textContent;
          var value = labels[ i ].control.value;
          args[ label ] = value;
        }
        var cmdObj = JSON.parse( $( "#genericInputModal" ).attr( 'data-info' ) );
        session.sendCommand( {
          ops_path: cmdObj.cmd.name,
          args: args
        } )
      }
    
    script(type="text/javascript" src='/commander/app/util.js') 
    script(type="text/javascript" src='/commander/client.js') 
    script(type="text/javascript" src='/commander/app/controller.js') 
    script(type="text/javascript" src='/commander/app/ui/navtree.js') 
    script(type="text/javascript" src='/commander/app/ui/layout.js') 
    script(type="text/javascript" src='/commander/app/ui/modal.js') 
    script(type="text/javascript" src='/commander/app/ui/misc.js')
