doctype html
html(lang='en-us')
  head
    meta(charset='utf-8')
    title Commander
    meta(name='description', content='')
    meta(name='author', content='')
    meta(name='viewport', content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no')
    link(rel='stylesheet', type='text/css', media='screen', href='css/bootstrap.min.css')
    link(rel='stylesheet', type='text/css', media='screen', href='css/font-awesome.min.css')
    link(rel='stylesheet', type='text/css', media='screen', href='css/font-mfizz/font-mfizz.css')
    // SmartAdmin Styles : Caution! DO NOT change the order
    link(rel='stylesheet', type='text/css', media='screen', href='css/smartadmin-production-plugins.min.css')
    link(rel='stylesheet', type='text/css', media='screen', href='css/smartadmin-production.min.css')
    link(rel='stylesheet', type='text/css', media='screen', href='css/smartadmin-skins.min.css')
    // DEV links : turn this on when you like to develop directly
    // <link rel="stylesheet" type="text/css" media="screen" href="../Source_UNMINIFIED_CSS/smartadmin-production.css">
    // <link rel="stylesheet" type="text/css" media="screen" href="../Source_UNMINIFIED_CSS/smartadmin-skins.css">
    // SmartAdmin RTL Support
    link(rel='stylesheet', type='text/css', media='screen', href='css/smartadmin-rtl.min.css')
    //
      We recommend you use "your_style.css" to override SmartAdmin
      specific styles this will also ensure you retrain your customization with each SmartAdmin update.
    link(rel='stylesheet', type='text/css', media='screen', href='css/windhover.css')
    // #FAVICONS
    link(rel='shortcut icon', href='img/favicon/favicon.ico', type='image/x-icon')
    link(rel='icon', href='img/favicon/favicon.ico', type='image/x-icon')
    // #GOOGLE FONT
    link(rel='stylesheet', href='http://fonts.googleapis.com/css?family=Open+Sans:400italic,700italic,300,400,700')
    // #APP SCREEN / ICONS
    //
      Specifying a Webpage Icon for Web Clip
      Ref: https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html
    link(rel='apple-touch-icon', href='img/splash/sptouch-icon-iphone.png')
    link(rel='apple-touch-icon', sizes='76x76', href='img/splash/touch-icon-ipad.png')
    link(rel='apple-touch-icon', sizes='120x120', href='img/splash/touch-icon-iphone-retina.png')
    link(rel='apple-touch-icon', sizes='152x152', href='img/splash/touch-icon-ipad-retina.png')
    // iOS web-app metas : hides Safari UI Components and Changes Status Bar Appearance
    meta(name='apple-mobile-web-app-capable', content='yes')
    meta(name='apple-mobile-web-app-status-bar-style', content='black')
    // Startup image for web apps
    link(rel='apple-touch-startup-image', href='img/splash/ipad-landscape.png', media='screen and (min-device-width: 481px) and (max-device-width: 1024px) and (orientation:landscape)')
    link(rel='apple-touch-startup-image', href='img/splash/ipad-portrait.png', media='screen and (min-device-width: 481px) and (max-device-width: 1024px) and (orientation:portrait)')
    link(rel='apple-touch-startup-image', href='img/splash/iphone.png', media='screen and (max-device-width: 320px)')
    link(rel='stylesheet', type='text/css', href='bower_components/jquery-flight-indicators/css/flightindicators.css')
  //
    TABLE OF CONTENTS.
    Use search to find needed section.
    ===================================================================
    |  01. #CSS Links                |  all CSS links and file paths  |
    |  02. #FAVICONS                 |  Favicon links and file paths  |
    |  03. #GOOGLE FONT              |  Google font link              |
    |  04. #APP SCREEN / ICONS       |  app icons, screen backdrops   |
    |  05. #BODY                     |  body tag                      |
    |  06. #HEADER                   |  header tag                    |
    |  07. #PROJECTS                 |  project lists                 |
    |  08. #TOGGLE LAYOUT BUTTONS    |  layout buttons and actions    |
    |  09. #MOBILE                   |  mobile view dropdown          |
    |  10. #SEARCH                   |  search field                  |
    |  11. #NAVIGATION               |  left panel & navigation       |
    |  12. #MAIN PANEL               |  main panel                    |
    |  13. #MAIN CONTENT             |  content holder                |
    |  14. #PAGE FOOTER              |  page footer                   |
    |  15. #SHORTCUT AREA            |  dropdown shortcuts area       |
    |  16. #PLUGINS                  |  all scripts and plugins       |
    ===================================================================
  // #BODY
  //
    Possible Classes
    * 'smart-style-{SKIN#}'
    * 'smart-rtl'         - Switch theme mode to RTL
    * 'menu-on-top'       - Switch to top navigation (no DOM change required)
    * 'no-menu'        - Hides the menu completely
    * 'hidden-menu'       - Hides the main menu but still accessable by hovering over left edge
    * 'fixed-header'      - Fixes the header
    * 'fixed-navigation'  - Fixes the main menu
    * 'fixed-ribbon'      - Fixes breadcrumb
    * 'fixed-page-footer' - Fixes footer
    * 'container'         - boxed layout mode (non-responsive: will not work with fixed-navigation & fixed-ribbon)
  body.windhover-style-0
    // #HEADER
    header#header
      #logo-group
        span#logo
          img(src='img/logo-pale.png', alt='Commander')

        // AJAX-DROPDOWN : control this dropdown height, look and feel from the LESS variable file
      // #PROJECTS: projects dropdown
      .project-context.hidden-xs.dropdown(dropdown='')
        span.label Default Instance:
        span.project-selector.dropdown-toggle(data-toggle='dropdown')
          span#yamcs-instance-selected Select
          i.fa.fa-angle-down
        ul#yamcs-instance-list.dropdown-menu
      // end projects dropdown

      #notification-group
        span#event-notification.activity-dropdown.notification
          i.fa.fa-exclamation-triangle
          b.badge  21
        .event-notification-dropdown.notification-dropdown
          // the ID links are fetched via AJAX to the ajax container "ajax-notifications"
          .btn-group.btn-group-justified(data-toggle='buttons')
            label.btn.btn-default
              input(type='radio', name='activity', id='ajax/notify/mail.html')
              |                 Critical (0)
            label.btn.btn-default
              input(type='radio', name='activity', id='ajax/notify/mail.html')
              |                 Error (14)
            label.btn.btn-default
              input(type='radio', name='activity', id='ajax/notify/notifications.html')
              |                 Info (3)
            label.btn.btn-default
              input(type='radio', name='activity', id='ajax/notify/tasks.html')
              |                 Debug (4)
          // notification content
          .notifications.custom-scroll.no-padding
            .alert.alert-transparent.no-padding
              table.no-padding#event_summary_jqgrid(style='width: 1000px')
              #event_summary_pjqgrid
          // end notification content
          // footer: refresh area
          span
            | Events Display
          // end footer
        // END AJAX-DROPDOWN

        span#alarm-notification.activity-dropdown.notification
          i.fa.fa-bell
          b.badge  15
        .alarm-notification-dropdown.notification-dropdown
          // the ID links are fetched via AJAX to the ajax container "ajax-notifications"
          .btn-group.btn-group-justified(data-toggle='buttons')
            label.btn.btn-default
              input(type='radio', name='activity', id='ajax/notify/mail.html')
              |                 Severe (0)
            label.btn.btn-default
              input(type='radio', name='activity', id='ajax/notify/mail.html')
              |                 Critical (14)
            label.btn.btn-default
              input(type='radio', name='activity', id='ajax/notify/notifications.html')
              |                 Distress (3)
            label.btn.btn-default
              input(type='radio', name='activity', id='ajax/notify/tasks.html')
              |                 Warning (4)
            label.btn.btn-default
              input(type='radio', name='activity', id='ajax/notify/tasks.html')
              |                 Watch (1)
          // notification content
          .notifications.custom-scroll.no-padding
            .alarm.alert-transparent.no-padding
              table.no-padding#alarm_summary_jqgrid(style='width:1000px')
              #alarm_summary_pjqgrid
          // end notification content
          // footer: refresh area
          span
            | Alarms Display
          // end footer
        // END AJAX-DROPDOWN


      // #TOGGLE LAYOUT BUTTONS
      // pulled right: nav area
      .pull-right
        // collapse menu button
        #hide-menu.btn-header.pull-right
          span
            a(href='javascript:void(0);', data-action='toggleMenu', title='Collapse Menu')
              i.fa.fa-reorder
        // end collapse menu
        // #MOBILE
        // Top menu profile link : this shows only when top menu is active
        ul#mobile-profile-img.header-dropdown-list.hidden-xs.padding-5
          li
            a.dropdown-toggle.no-margin.userdropdown(href='#', data-toggle='dropdown')
              img.online(src='img/avatars/sunny.png', alt='John Doe')
            ul.dropdown-menu.pull-right
              li
                a.padding-10.padding-top-0.padding-bottom-0(href='javascript:void(0);')
                  i.fa.fa-cog
                  |  Setting
              li.divider
              li
                a.padding-10.padding-top-0.padding-bottom-0(href='#ajax/profile.html')
                  i.fa.fa-user
                  u P
                  | rofile
              li.divider
              li
                a.padding-10.padding-top-0.padding-bottom-0(href='javascript:void(0);', data-action='toggleShortcut')
                  i.fa.fa-arrow-down
                  u S
                  | hortcut
              li.divider
              li
                a.padding-10.padding-top-0.padding-bottom-0(href='javascript:void(0);', data-action='launchFullscreen')
                  i.fa.fa-arrows-alt
                  |  Full
                  u S
                  | creen
              li.divider
              li
                a.padding-10.padding-top-5.padding-bottom-5(href='login.html', data-action='userLogout')
                  i.fa.fa-sign-out.fa-lg
                  strong
                    u L
                    | ogout
        // logout button
        #logout.btn-header.transparent.pull-right
          span
            a(href='login.html', title='Sign Out', data-action='userLogout', data-logout-msg='You can improve your security further after logging out by closing this opened browser')
              i.fa.fa-sign-out
        // end logout button
        // search mobile button (this is hidden till mobile view port)
        #search-mobile.btn-header.transparent.pull-right
          span
            a(href='javascript:void(0)', title='Search')
              i.fa.fa-search
        // end search mobile button
        // #SEARCH
        // input: search field
        form.header-search.pull-right(action='#ajax/search.html')
          input#search-fld(type='text', name='param', placeholder='Find telemetry or command')
          a#cancel-search-js(href='javascript:void(0);', title='Cancel Search')
            i.fa.fa-times
        // end input: search field
        // fullscreen button
        #fullscreen.btn-header.transparent.pull-right
          span
            a(href='javascript:void(0);', data-action='launchFullscreen', title='Full Screen')
              i.fa.fa-arrows-alt
        // end fullscreen button
        // #Voice Command: Start Speech
        //
          NOTE: Voice command button will only show in browsers that support it. Currently it is hidden under mobile browsers.
          You can take off the "hidden-sm" and "hidden-xs" class to display inside mobile browser
        #speech-btn.btn-header.transparent.pull-right.hidden-sm.hidden-xs
          div
            a(href='javascript:void(0)', title='Voice Command', data-action='voiceCommand')
              i.fa.fa-microphone
            .popover.bottom
              .arrow
              .popover-content
                h4.vc-title
                  | Voice command activated
                  br
                  small Please speak clearly into the mic
                h4.vc-title-error.text-center
                  i.fa.fa-microphone-slash
                  |  Voice command failed
                  br
                  small.txt-color-red
                    | Must
                    strong "Allow"
                    |  Microphone
                  br
                  small.txt-color-red
                    | Must have
                    strong Internet Connection
                a.btn.btn-success(href='javascript:void(0);', onclick='commands.help()') See Commands
                a.btn.bg-color-purple.txt-color-white(href='javascript:void(0);', onclick="$('#speech-btn .popover').fadeOut(50);") Close Popup
        // end voice command
        // multiple lang dropdown : find all flags in the flags page
        ul.header-dropdown-list.hidden-xs
          li
            a.dropdown-toggle(href='#', data-toggle='dropdown')
              img.flag.flag-us(src='img/blank.gif', alt='United States')
              span  US
              i.fa.fa-angle-down
            ul.dropdown-menu.pull-right
              li.active
                a(href='javascript:void(0);')
                  img.flag.flag-us(src='img/blank.gif', alt='United States')
                  |  English (US)
        // end multiple lang
      // end pulled right: nav area
    // END HEADER
    // #NAVIGATION
    // Left panel : Navigation area
    // Note: This width of the aside area can be adjusted through LESS/SASS variables
    aside#left-panel.hasmenu
      // User info
      //.login-info
      //  span
      //    // User image size is adjusted inside CSS, it should stay as is
      //    a#show-shortcut(href='javascript:void(0);', data-action='toggleShortcut')
      //      img.online(src='img/avatars/sunny.png', alt='me')
      //      span
      //        | john.doe
      //      i.fa.fa-angle-down
      // end user info
      //
        NAVIGATION : This navigation is also responsive
        To make this navigation dynamic please make sure to link the node
        (the reference to the nav > ul) after page load. Or the navigation
        will not initialize.
      #navBox
        nav
          ul(data-path='')
            li
              a(href='view/flight/pilot')
                i.fa.fa-lg.fa-fw.fa-folder-o
                span.menu-item-parent  flight  /  pilot.jade
      span.hasmenu.minifyme(data-action='minifyMenu')
        i.fa.fa-arrow-circle-left.hit
    // END NAVIGATION
    // #MAIN PANEL
    #main(role='main')
      // RIBBON
      #ribbon
        span.ribbon-button-alignment
          span#refresh.btn.btn-ribbon(data-action='resetWidgets', data-title='refresh', rel='tooltip', data-placement='bottom', data-original-title="<i class='text-warning fa fa-warning'></i> Warning! This will reset all your widget settings.", data-html='true', data-reset-msg='Would you like to RESET all your saved widgets and clear LocalStorage?')
            i.fa.fa-refresh
        // breadcrumb
        ol.breadcrumb
        span.ribbon-button-alignment.pull-right(style="margin-right:25px")

      // #MAIN CONTENT
      #content
      block main
      // END #MAIN CONTENT
    // END #MAIN PANEL
    // #PAGE FOOTER
    //.page-footer
    //  .row
    //    .col-xs-12.col-sm-6
    //      span.txt-color-white
    //        | SmartAdmin 1.8.x
    //        span.hidden-xs  - Web Application Framework
    //        |  © 2014-2016
    //  // end row
    // END FOOTER
    //
      #SHORTCUT AREA : With large tiles (activated via clicking user name tag)
      Note: These tiles are completely responsive, you can add as many as you like
    #shortcut
      ul
        li
          a.jarvismetro-tile.big-cubes.bg-color-blue(href='#ajax/dashboard.html')
            span.iconbox
              i.fa.fa-envelope.fa-4x
              span
                | Mail
                span.label.pull-right.bg-color-darken 14
    // END SHORTCUT AREA
    // ==================================================
    //
      PACE LOADER - turn this on if you want ajax loading to show (caution: uses lots of memory on iDevices)
      <script data-pace-options='{ "restartOnRequestAfter": true }' src="js/plugin/pace/pace.min.js"></script>
    // #PLUGINS
    // Link to Google CDN's jQuery + jQueryUI; fall back to local
    script(src='js/libs/jquery-2.1.1.min.js')
    script(src='js/libs/jquery-ui-1.10.3.min.js')
    // IMPORTANT: APP CONFIG
    script(src='js/app.config.seed.js')
    // JS TOUCH : include this plugin for mobile drag / drop touch events
    script(src='js/plugin/jquery-touch/jquery.ui.touch-punch.min.js')
    // BOOTSTRAP JS
    script(src='js/bootstrap/bootstrap.min.js')
    // CUSTOM NOTIFICATION
    script(src='js/notification/SmartNotification.min.js')
    // JARVIS WIDGETS
    script(src='js/smartwidgets/jarvis.widget.min.js')
    // EASY PIE CHARTS
    script(src='js/plugin/easy-pie-chart/jquery.easy-pie-chart.min.js')
    // SPARKLINES
    script(src='js/plugin/sparkline/jquery.sparkline.min.js')
    // JQUERY VALIDATE
    script(src='js/plugin/jquery-validate/jquery.validate.min.js')
    // JQUERY MASKED INPUT
    script(src='js/plugin/masked-input/jquery.maskedinput.min.js')
    // JQUERY SELECT2 INPUT
    script(src='js/plugin/select2/select2.min.js')
    // JQUERY UI + Bootstrap Slider
    script(src='js/plugin/bootstrap-slider/bootstrap-slider.min.js')
    // browser msie issue fix
    script(src='js/plugin/msie-fix/jquery.mb.browser.min.js')
    // FastClick: For mobile devices: you can disable this in app.js
    script(src='js/plugin/fastclick/fastclick.min.js')
    //if IE 8
      h1
        | Your browser is out of date, please update your browser by going to www.microsoft.com/download
    // MAIN APP JS FILE
    script(src='js/app.js')
    // ENHANCEMENT PLUGINS : NOT A REQUIREMENT
    // Voice command : plugin
    script(src='js/speech/voicecommand.min.js')
    // SmartChat UI : plugin
    script(src='js/smart-chat-ui/smart.chat.ui.min.js')
    script(src='js/smart-chat-ui/smart.chat.manager.min.js')
    script(src='js/plugin/x-editable/moment.min.js')
    script(src='js/plugin/x-editable/jquery.mockjax.min.js')
    script(src='js/plugin/x-editable/x-editable.min.js')
    // BOOTSTRAP JS
    script(src='bower_components/bs-context-menu/dist/BootstrapMenu.min.js')
    script(src='js/plugin/flot/jquery.flot.min.js')
    //script(src='js/plugin/flot/jquery.flot.cust.min.js')
    //script(src='js/plugin/flot/jquery.flot.resize.min.js')
    //script(src='js/plugin/flot/jquery.flot.fillbetween.min.js')
    //script(src='js/plugin/flot/jquery.flot.orderBar.min.js')
    //script(src='js/plugin/flot/jquery.flot.pie.min.js')
    script(src='js/plugin/flot/jquery.flot.time.min.js')
    //script(src='js/plugin/flot/jquery.flot.tooltip.min.js')
    script(src='js/plugin/flot/jquery.flot.threshold.min.js')
    script(src='/socket.io/socket.io.js')
    script(src='bower_components/sprintf/dist/sprintf.min.js')
    script(src='bower_components/handlebars/handlebars.min.js')
    script(src='bower_components/jquery-flight-indicators/js/jquery.flightindicators.min.js')
    script(src='bower_components/svg.js/dist/svg.min.js')
    script(src='bower_components/eventEmitter/EventEmitter.js')
    script(src='js/plugin/jqgrid/jquery.jqGrid.min.js')
    script(src='js/plugin/jqgrid/grid.locale-en.min.js')
    // <script src="bower_components/jsyg-events/JSYG.Events.js"></script>
    // <script src="bower_components/jQuery.Hotkeys/jquery.hotkeys.js"></script>
    // <script src="bower_components/jsyg-stdconstruct/JSYG.StdConstruct.js"></script>
    // <script src="bower_components/jsyg-menu/JSYG.Menu.js"></script>
    // <script src="bower_components/jsyg-contextmenu/JSYG.ContextMenu.js"></script>
    // <script src="bower_components/zl-contextmenu/dist/zl-contextmenu.js"></script>
    // <script src="bower_components/ui-contextmenu/jquery.ui-contextmenu.min.js"></script>
    // <script src="bower_components/contextMenu/contextMenu.min.js"></script>
    // <script src="bower_components/jquery-ui/jquery-ui.min.js"></script>
    // <script src="bower_components/jquery-ui/jquery-ui.js"></script>
    // <script src="bower_components/angular/angular.min.js"></script>
    // <script src="bower_components/angular-mocks/angular-mocks.js"></script>
    // <script src="bower_components/contextMenu/contextMenu.min.js"></script>
    // <script src="bower_components/jquery/dist/jquery.min.js"></script>
    // <script src="bower_components/jQuery.Hotkeys/jquery.hotkeys.js"></script>
    // <script src="bower_components/jquery-Mustache/src/jquery.mustache.js"></script>
    // <script src="bower_components/jsyg-stdconstruct/JSYG.StdConstruct.js"></script>
    // <script src="bower_components/mustache.js/mustache.js"></script>
    // <script src="bower_components/ng-contextmenu/dist/ng-contextmenu.min.js"></script>
    // <script src="bower_components/react-contextmenu/src/contextmenu-layer.js"></script>
    // <script src="bower_components/ui-contextmenu/jquery.ui-contextmenu.min.js"></script>
    script(src = 'sage/client.js')
    script.
      var session = new Sage();

      session.on('connect', function() {
        session.getInstanceList(function(instances) {
          $("#yamcs-instance-list").text('');
            $.each(instances.instance, function (i, selected) {
              $("#yamcs-instance-list").append(
                $('<li>').append(
                  $('<a>').attr('href', 'javascript:void(0);').on("click", function (item) {
                    var newInstance = item.target.text;
                    $("#yamcs-instance-selected").text(newInstance);
                    session.setDefaultInstance(newInstance, function () {
                      BindHtmlToCommanderInstance(newInstance);
                    });
                  }).append(selected.name)));
            });
            getWorkspaceDir();
        });
      });

      //BindHtmlToCommanderInstance(instanceName);

      var CommanderTlmDataElements = [];

      var procDirectoryListing = function (listing) {
        /* Add 'url', and 'ext' attributes */
        for (var i = 0; i < listing.files.length; i++) {
          var path = listing.files[i].path;
          var subpath;
          var subname;
          var ext;
          var name = listing.files[i].name;
          subpath = path.substring(0, path.lastIndexOf("/") + 1);
          var a = listing.files[i].path.split('.');
          if (a.length === 1 || ( a[0] === '' && a.length === 2 )) {
            ext = '';
          }
          ext = a.pop();
          /* Prepend 'view' to the path to make the URL and cut off the jade extension. */
          if (ext == '') {
            listing.files[i].url = 'view' + path;
          } else {
            if (ext == 'js') {
              listing.files[i].url = 'view/scripting/index?url=ws' + path;
            } else {
              listing.files[i].url = 'view' + path;
            }
          }
          listing.files[i].ext = ext;
        }
        updateNavBar(listing);
        addNavMenu();
      };

      var processTelemetryUpdate = function (param) {
        var found = false;
        for (var i = 0; i < CommanderTlmDataElements.length; i++) {
          var jsonObj = JSON.parse(CommanderTlmDataElements[i].attr('data-sage'));
          for (var j = 0; j < jsonObj.tlm.length; j++) {
            if (jsonObj.tlm[j].name == param.id.name){
              var correctInstance = false;
              if(jsonObj.hasOwnProperty('instance') && (jsonObj.instance == param.instance)) {
                correctInstance = true;
              } else {
                if(param.instance == $("#yamcs-instance-selected").text()){
                  correctInstance = true;
                }
              }

              found = true;
              if(correctInstance == true){
                var value;
                if (param.engValue.hasOwnProperty('floatValue')) {
                  /* TODO */
                  value = param.engValue.floatValue;
                } else if (param.engValue.hasOwnProperty('doubleValue')) {
                  /* TODO */
                  value = param.engValue.doubleValue;
                } else if (param.engValue.hasOwnProperty('sint32Value')) {
                  /* TODO */
                  value = param.engValue.sint32Value;
                } else if (param.engValue.hasOwnProperty('uint32Value')) {
                  /* TODO */
                  value = param.engValue.uint32Value;
                } else if (param.engValue.hasOwnProperty('binaryValue')) {
                  /* TODO */
                  value = param.engValue.binaryValue;
                } else if (param.engValue.hasOwnProperty('stringValue')) {
                  /* TODO */
                  value = param.engValue.stringValue;
                } else if (param.engValue.hasOwnProperty('timestampValue')) {
                  /* TODO */
                  value = param.engValue.timestampValue;
                } else if (param.engValue.hasOwnProperty('uint64Value')) {
                  /* TODO */
                  value = param.engValue.uint64Value;
                } else if (param.engValue.hasOwnProperty('sint64Value')) {
                  /* TODO */
                  value = param.engValue.sint64Value;
                } else if (param.engValue.hasOwnProperty('booleanValue')) {
                  /* TODO */
                  value = param.engValue.booleanValue;
                } else {
                  /* TODO */
                  value = '???';
                }

                if(CommanderTlmDataElements[i].is(':checkbox')) {
                  if((value == true) || (value > 0.0))
                    CommanderTlmDataElements[i].prop( "checked", true );
                  else
                    CommanderTlmDataElements[i].prop( "checked", false );
                } else {
                  if (jsonObj.tlm[j].hasOwnProperty('format')) {
                    value = sprintf(jsonObj.tlm[j].format, value);
                  }
                  CommanderTlmDataElements[i].text(value);
                }

                /* Set the data validity timer, if timeout is specified. */
                if(param.hasOwnProperty('expirationTime')){
                  var tlmObj = CommanderTlmDataElements[i];

                  /* Expiration time is set.  Check if we already have a timer set. */
                  if(CommanderTlmDataElements[i].hasOwnProperty('timeout')){
                    /* Yes, one is already set.  Clear it first. */
                    clearTimeout(CommanderTlmDataElements[i].timeout);

                    /* Remove the timeout class, if it has one. */
                    tlmObj.removeClass('tlm-timedout');
                  }

                  /* Now set a new timeout. */
                  var timeout = param.expirationTime - param.acquisitionTime;
                  CommanderTlmDataElements[i].timeout = setTimeout(function () {
                    /* Telemetry timed out. */
                    tlmObj.addClass('tlm-timedout');
                  }, timeout);
                }
              }
            }
          }
        }
        if (found == false) {
          session.unsubscribe({tlm:[{'name':param.id.name}]});
        }
      };

      var BindHtmlToCommanderInstance = function (instanceName) {
        var self = this;
        var tlm = [];
        var self = this;

        CommanderTlmDataElements.length = 0;

        $('[data-sage]').each(function () {
          var obj = $(this).attr('data-sage');
          var jsonObj;
          if (typeof obj === 'string' || obj instanceof String) {
            // it's a string
            jsonObj = JSON.parse(obj);
          }
          else if (typeof obj === 'object' || obj instanceof Object) {
            // it's an object
            jsonObj = obj;
          }
          else {
            // it's something else
            return;
          }

          if (jsonObj.hasOwnProperty('tlm')) {
            /* This is a telemetry object. */
            session.subscribe(jsonObj, processTelemetryUpdate);
            CommanderTlmDataElements.push($(this));
          }
          if (jsonObj.hasOwnProperty('cmd')) {
            /* This is a command object. */
            var cmdObj = jsonObj.cmd;
            var btnObj = $(this);
            session.getCommandInfo({name:cmdObj.name}, function (cmdInfo) {
              if (cmdObj.hasOwnProperty('uuid')) {
                /* We already bound this element. */
              } else {
                if ((cmdObj.name == cmdInfo.qualifiedName) &&
                    (cmdObj.instance == cmdInfo.instance)) {
                  var uuid = generateUUID();
                  cmdInfo.uuid = uuid;
                  cmdObj.uuid = uuid;
                  btnObj.attr('data-sage', JSON.stringify(jsonObj));
                  /* Copy any arguments we have from the command button into the cmdInfo struct. */
                  if (cmdObj.hasOwnProperty('argument')) {
                    for (i = 0; i < jsonObj.cmd.argument.length; i++) {
                      for (j = 0; j < cmdInfo.argument.length; j++) {
                        if (cmdInfo.argument[j].name == cmdObj.argument[i].name) {
                          cmdInfo.argument[j].value = cmdObj.argument[i].value;
                        }
                      }
                    }
                  }
                  if (isTemplateCommand(cmdInfo) == false) {
                    btnObj.click(function (eventObject) {
                      if (cmdInfo.hasOwnProperty('argument')) {
                        var args = [];
                        for (i = 0; i < cmdInfo.argument.length; i++) {
                          args.push({name: cmdInfo.argument[i].name, value: cmdInfo.argument[i].value});
                        }
                        session.sendCommand(cmdInfo.qualifiedName, args);
                      } else {
                        session.sendCommand(cmdInfo.qualifiedName, []);
                      }
                    });
                  } else {
                    /* First, generate UUIDs to be used later as element IDs. */
                    for (i = 0; i < cmdInfo.argument.length; i++) {
                      cmdInfo.argument[i].uuid = uuid + "_" + cmdInfo.argument[i].name;
                    }
                    /* Next set stringLength for string parameters to be used for form validation later. */
                    for (i = 0; i < cmdInfo.argument.length; i++) {
                      if (cmdInfo.argument[i].type == "STRING") {
                        /* Add a new stringLength (in bytes) attribute for parameter validation later. */
                        cmdInfo.argument[i].stringLength = cmdInfo.argument[i].type.dataEncoding.sizeInBits / 8;
                      }
                    }
                    var source = $.trim($('#cmdTemplate').html());
                    var template = Handlebars.compile(source);
                    var html = template(cmdInfo);
                    var dlg = $("<div id='" + uuid + "'></div>")
                      .append(html);
                    // Modal Link
                    btnObj.click(function () {
                      dlg.dialog('open');
                      return false;
                    });
                    $(dlg).dialog({
                      autoOpen: false,
                      modal: true,
                      html: true,
                      content: html,
                      buttons: [
                        {
                          html: "Cancel",
                          "class": "btn btn-default",
                          click: function () {
                            $(this).dialog("close");
                          }
                        },
                        {
                          html: "<i class='fa fa-check'></i>&nbsp; Send",
                          "class": "btn btn-primary",
                          click: function () {
                            var args = [];
                            for (i = 0; i < cmdInfo.argument.length; i++) {
                              if (cmdInfo.argument[i].type.engType == 'enumeration') {
                                args.push({
                                  'name': cmdInfo.argument[i].name,
                                  'value': $('#' + cmdInfo.argument[i].uuid + ' option:selected').text()
                                });
                              } else {
                                args.push({
                                  'name': cmdInfo.argument[i].name,
                                  'value': $('#' + cmdInfo.argument[i].uuid).val()
                                });
                              }
                            }
                            $(this).dialog(session.sendCommand(cmdInfo.qualifiedName, args));
                            $(this).dialog("close");
                          }
                        }
                      ]
                    });
                  }
                }
              }
            });
          }
        });

        //self.get_events_list(instanceName, null, null, null, null, null, null);
        //get_streams_list(instanceName);
        setupEventSummaryDisplay();
        setupAlarmSummaryDisplay();
      };

      var setupEventSummaryDisplay = function () {
        var event_summary_jqgrid_data = [{
          time: '12:00:01.000',
          src : 'SCH',
          id: 123,
          sev : 'DEBUG'
        },{
          time: '12:00:02.000',
          src : 'SCH',
          id: 123,
          sev : 'INFO'
        },{
          time: '12:00:03.000',
          src : 'SCH',
          id: 123,
          sev : 'ERROR'
        },{
          time: '12:00:04.000',
          src : 'SCH',
          id: 123,
          sev : 'CRIT'
        },{
          time: '12:00:05.000',
          src : 'SCH',
          id: 123,
          sev : 'INFO'
        },{
          time: '12:00:06.000',
          src : 'SCH',
          id: 123,
          sev : 'INFO'
        },{
          time: '12:00:07.000',
          src : 'SCH',
          id: 123,
          sev : 'INFO'
        },{
          time: '12:00:08.000',
          src : 'SCH',
          id: 123,
          sev : 'INFO'
        },{
          time: '12:00:09.000',
          src : 'SCH',
          id: 123,
          sev : 'INFO'
        },{
          time: '12:00:10.000',
          src : 'SCH',
          id: 123,
          sev : 'INFO'
        },{
          time: '12:00:10.000',
          src : 'SCH',
          id: 123,
          sev : 'INFO'
        }];

        jQuery("#event_summary_jqgrid").jqGrid({
          data : event_summary_jqgrid_data,
          datatype : 'local',
          height : 'auto',
          colNames : ['Severity', 'Time', 'Source', 'ID'],
          colModel : [{
            name : 'sev',
            index : 'sev',
            sortable : true,
            editable : false,
            align : 'left',
            width : 60
          }, {
            name : 'time',
            index : 'time',
            sortable : true,
            editable : false,
            align : 'left'
          }, {
            name : 'src',
            index : 'src',
            sortable : true,
            editable : false,
            align : 'left',
            width : 60
          }, {
            name : 'id',
            index : 'id',
            sortable : true,
            editable : false,
            align : 'left',
            width : 30
          }],
          rowNum : 10,
          rowList : [10, 20, 30],
          pager : '#event_summary_pjqgrid',
          sortname : 'time',
          toolbarfilter : true,
          viewrecords : true,
          sortorder : 'asc',
          gridComplete : function() {
            var ids = jQuery('#event_summary_jqgrid').jqGrid('getDataIDs');
            for (var i = 0; i < ids.length; i++) {
              var cl = ids[i];
              be = "<button class='btn btn-xs btn-default' data-original-title='Edit Row' onclick=\"jQuery('#event_summary_jqgrid').editRow('" + cl + "');\"><i class='fa fa-pencil'></i></button>";
              se = "<button class='btn btn-xs btn-default' data-original-title='Save Row' onclick=\"jQuery('#event_summary_jqgrid').saveRow('" + cl + "');\"><i class='fa fa-save'></i></button>";
              ca = "<button class='btn btn-xs btn-default' data-original-title='Cancel' onclick=\"jQuery('#event_summary_jqgrid').restoreRow('" + cl + "');\"><i class='fa fa-times'></i></button>";
              //ce = "<button class='btn btn-xs btn-default' onclick=\"jQuery('#event_summary_jqgrid').restoreRow('"+cl+"');\"><i class='fa fa-times'></i></button>";
              //jQuery('#event_summary_jqgrid').jqGrid('setRowData',ids[i],{act:be+se+ce});
              jQuery('#event_summary_jqgrid').jqGrid('setRowData', ids[i], {
                act : be + se + ca
              });
            }
          },
          editurl : 'dummy.html',
          multiselect : false,
          autowidth : true,
        });

        jQuery('#event_summary_jqgrid').jqGrid('navGrid', '#event_summary_pjqgrid', {
          edit : false,
          add : false,
          del : false,
          search : false,
          refresh : false
        });
        jQuery('#event_summary_jqgrid').jqGrid('inlineNav', '#event_summary_pjqgrid');
        /* Add tooltips */
        $('.navtable .ui-pg-button').tooltip({
          container : 'body'
        });
      };

      var setupAlarmSummaryDisplay = function () {
        var alarm_summary_jqgrid_data = [{
          name: '/CFS/HS/UtilCpuAvg',
          acqTime: '12:00:01.000',
          actLevel : 2,
          highestLevel: 4,
          currentLevel : 2
        },{
          name: '/CFS/HS/UtilCpuAvg',
          acqTime: '12:00:01.000',
          actLevel : 2,
          highestLevel: 4,
          currentLevel : 2
        },{
          name: '/CFS/HS/UtilCpuAvg',
          acqTime: '12:00:01.000',
          actLevel : 2,
          highestLevel: 4,
          currentLevel : 2
        }];

        var outerwidth = $("#alarm-notification-dropdown").width();
        jQuery("#alarm_summary_jqgrid").jqGrid({
          data : alarm_summary_jqgrid_data,
          datatype : 'local',
          height : 'auto',
          colNames : ['Name', 'Acq Time', 'Activation', 'Highest', 'Current'],
          colModel : [{
            name : 'name',
            index : 'name',
            sortable : true,
            editable : false,
            align : 'left'
          }, {
            name : 'acqTime',
            index : 'acqTime',
            sortable : true,
            editable : false,
            align : 'left',
            width : 150
          }, {
            name : 'actLevel',
            index : 'actLevel',
            sortable : true,
            editable : false,
            align : 'left',
            width : 60
          }, {
            name : 'highestLevel',
            index : 'highestLevel',
            sortable : true,
            editable : false,
            align : 'left',
            width : 60
          }, {
            name : 'currentLevel',
            index : 'currentLevel',
            sortable : true,
            editable : false,
            align : 'left',
            width : 60
          }],
          rowNum : 10,
          rowList : [10, 20, 30],
          pager : '#alarm_summary_pjqgrid',
          sortname : 'time',
          toolbarfilter : true,
          viewrecords : true,
          sortorder : 'asc',
          gridComplete : function() {
            var ids = jQuery('#event_summary_jqgrid').jqGrid('getDataIDs');
            for (var i = 0; i < ids.length; i++) {
              var cl = ids[i];
              be = "<button class='btn btn-xs btn-default' data-original-title='Edit Row' onclick=\"jQuery('#alarm_summary_jqgrid').editRow('" + cl + "');\"><i class='fa fa-pencil'></i></button>";
              se = "<button class='btn btn-xs btn-default' data-original-title='Save Row' onclick=\"jQuery('#alarm_summary_jqgrid').saveRow('" + cl + "');\"><i class='fa fa-save'></i></button>";
              ca = "<button class='btn btn-xs btn-default' data-original-title='Cancel' onclick=\"jQuery('#alarm_summary_jqgrid').restoreRow('" + cl + "');\"><i class='fa fa-times'></i></button>";
              //ce = "<button class='btn btn-xs btn-default' onclick=\"jQuery('#alarm_summary_jqgrid').restoreRow('"+cl+"');\"><i class='fa fa-times'></i></button>";
              //jQuery('#alarm_summary_jqgrid').jqGrid('setRowData',ids[i],{act:be+se+ce});
              jQuery('#alarm_summary_jqgrid').jqGrid('setRowData', ids[i], {
                act : be + se + ca
              });
            }
          },
          editurl : 'dummy.html',
          multiselect : false,
          autowidth: true,
          shrinkToFit: true,
          width: outerwidth
        });
        $("#alarm_summary_jqgrid").jqGrid('setGridWidth', 468);

        //jQuery('#alarm_summary_jqgrid').jqGrid('navGrid', '#alarm_summary_pjqgrid', {
        //  edit : false,
        //  add : false,
        //  del : false,
        //  search : false,
        //  refresh : false
        //});
        //jQuery('#alarm_summary_jqgrid').jqGrid('inlineNav', '#alarm_summary_pjqgrid');
        ///* Add tooltips */
        //$('.navtable .ui-pg-button').tooltip({
        //  container : 'body'
        //});
      
        //$(window).on('resize.jqGrid', function() {
        //  $("#alarm_summary_jqgrid").jqGrid('setGridWidth', $("#alarm_summary_jqgrid").parent().width());
        //})
      };

      var navBarEmpty = true;
      $(document).ready(function(){
        Handlebars.registerHelper('ifCond', function (v1, operator, v2, options) {
          switch (operator) {
            case '==':
              return (v1 == v2) ? options.fn(this) : options.inverse(this);
            case '===':
              return (v1 === v2) ? options.fn(this) : options.inverse(this);
            case '<':
              return (v1 < v2) ? options.fn(this) : options.inverse(this);
            case '<=':
              return (v1 <= v2) ? options.fn(this) : options.inverse(this);
            case '>':
              return (v1 > v2) ? options.fn(this) : options.inverse(this);
            case '>=':
              return (v1 >= v2) ? options.fn(this) : options.inverse(this);
            case '&&':
              return (v1 && v2) ? options.fn(this) : options.inverse(this);
            case '||':
              return (v1 || v2) ? options.fn(this) : options.inverse(this);
            default:
              return options.inverse(this);
          }
        });
      });
      var pagedestroy = function(){
        session.unsubscribeAll();
      };

      function isTemplateCommand(commandInfo) {
        if(commandInfo.hasOwnProperty('argument')){
          if(commandInfo.argument.length == 0){
            return false;
          } else {
            var found = false;
            /* Look for at least 1 unspecified value. */
            for(i=0; i < commandInfo.argument.length; i++){
              if(!commandInfo.argument[i].hasOwnProperty('value')){
                found = true;
              }
            }
            return found;
          }
        } else {
          return false;
        }
      }
      function generateUUID(){
        var d = new Date().getTime();
        if(window.performance && typeof window.performance.now === "function"){
          d += performance.now(); //use high-precision timer if available
        }
        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
          var r = (d + Math.random()*16)%16 | 0;
          d = Math.floor(d/16);
          return (c=='x' ? r : (r&0x3|0x8)).toString(16);
        });
        return uuid;
      }
      function getWorkspaceDir(){
        session.getDirectoryListing('', procDirectoryListing);
      };
      function getNavEntry(path){
        return $( "nav" ).find( "ul[data-path='" + path + "']" );
      };
      function updateNavBar(listing) {
        var source = $.trim($('#navBarTemplate').html());
        var template = Handlebars.compile(source);
        var html = template(listing);
        var tgtObj = getNavEntry(listing.path);
        tgtObj.html('');
        tgtObj.append(html);
        tgtObj.removeClass('jarvis-menu-applied');
        initApp.leftNav();
      };
      function addNavMenu() {
        var menu = new BootstrapMenu('#left-panel', {
          fetchElementData: function($rowElem) {
          },
          /* group actions by their id to make use of separators between
           * them in the context menu. Actions not added to any group with
           * this option will appear in a default group of their own. */
          actionsGroups: [
            ['newFolder', 'newDisplay', 'newScriptJS', 'newScriptPy' ],
            ['openFile', 'editFile'],
            ['copyFile', 'pasteFile', 'deleteFile', 'renameFile', 'moveFile']
          ],
          /* you can declare 'actions' as an object instead of an array,
           * and its keys will be used as action ids. */
          actions: {
            newFolder: {
              name: 'New Folder',
              iconClass: 'fa-folder-o',
              onClick: function() {
                console.log("'New Folder' clicked.");
              },
              isEnabled: function() {
                return true;
              }
            },
            newDisplay: {
              name: 'New Display',
              iconClass: 'fa-tachometer',
              onClick: function() {
                console.log("'New Display' clicked.");
              },
              isEnabled: function() {
                return true;
              }
            },
            newScriptJS: {
              name: 'New JS Script',
              iconClass: 'icon-javascript',
              onClick: function() {
                console.log("'New JS Script' clicked.");
              },
              isShown: function() {
                return true;
              }
            },
            newScriptPy: {
              name: 'New Py Script',
              iconClass: 'icon-python',
              onClick: function() {
                console.log("'New Py Script' clicked.");
              },
              isShown: function() {
                return true;
              }
            },
            openFile: {
              name: 'Open',
              iconClass: 'fa-eye',
              onClick: function() {
                console.log("'Open' clicked.");
              },
              isEnabled: function() {
                return true;
              }
            },
            editFile: {
              name: 'Edit',
              iconClass: 'fa-edit',
              onClick: function() {
                console.log("'Edit' clicked.");
              },
              isEnabled: function() {
                return true;
              }
            },
            copyFile: {
              name: 'Copy',
              iconClass: 'fa-copy',
              onClick: function() {
                console.log("'Copy' clicked.");
              },
              isEnabled: function() {
                return true;
              }
            },
            pasteFile: {
              name: 'Paste',
              iconClass: 'fa-paste',
              onClick: function() {
                console.log("'Paste' clicked.");
              },
              isEnabled: function() {
                return true;
              }
            },
            deleteFile: {
              name: 'Delete',
              iconClass: 'fa-trash',
              onClick: function() {
                console.log("'Delete' clicked.");
              },
              isEnabled: function() {
                return true;
              }
            },
            renameFile: {
              name: 'Rename',
              onClick: function() {
                console.log("'Rename' clicked.");
              },
              isEnabled: function() {
                return true;
              }
            },
            moveFile: {
              name: 'Move',
              onClick: function() {
                console.log("'Move' clicked.");
              },
              isEnabled: function() {
                return true;
              }
            }
          }
        });
      };
    script#cmdTemplate(type='text/x-handlebars-template').
      <h4>{{ name }}</h4>
      {{#each argument}}
      {{#unless value}}
      <section>
      <label>
      {{name}}
      </label>
      {{/unless}}
      {{#ifCond type.engType '==' 'integer'}}
      <input class='form-control spinner validate[required,custom[integer]]' id='{{uuid}}' {{#if value}}type='hidden' value='{{value}}'{{else}}type='text' value='0'{{/if}}'' type='text' required digits />
      {{/ifCond}}
      {{#ifCond type.engType '==' 'float'}}
      <input class='form-control spinner validate[required,custom[integer]]' id='{{uuid}}' {{#if value}}type='hidden' value='{{value}}'{{else}}type='text' value='0'{{/if}}'' type='text' required digits />
      {{/ifCond}}
      {{#ifCond type.engType '==' 'string'}}
      <input class='form-control' id='{{uuid}}' {{#if value}}type='hidden' value='{{value}}'{{else}}type='text' value=''{{/if}}'' type='text' maxlength='{{stringLength}}'/>
      {{/ifCond}}
      {{#ifCond type.engType '==' 'enumeration'}}
      <label class='select'>
      <select id='{{uuid}}'>
      {{#each type.enumValue}}
      <option value='{{value}}'>{{label}}</option>
      {{/each}}
      </select>
      </label>
      <i></i>
      {{/ifCond}}
      {{/each}}
    script#navBarTemplate(type='text/x-handlebars-template').
      {{#each files}}
      {{#ifCond type '==' 'dir'}}
      <li class="">
      <a href="#" onclick="session.getDirectoryListing('{{path}}', procDirectoryListing);"><i class="fa fa-lg fa-fw fa-folder-o"></i> <span class="menu-item-parent">{{name}}</span></a>
      <ul data-path='{{path}}'>
      </ul>
      </li>
      {{else}}
      {{#ifCond ext '==' 'jade'}}
      <li><a href="{{url}}" title="{{name}}"><i class="fa icon-html"></i>{{name}}</a></li>
      {{/ifCond}}
      {{#ifCond ext '==' 'pug'}}
      <li><a href="{{url}}" title="{{name}}"><i class="fa icon-html"></i>{{name}}</a></li>
      {{/ifCond}}
      {{#ifCond ext '==' 'html'}}
      <li><a href="{{url}}" title="{{name}}"><i class="fa icon-html"></i>{{name}}</a></li>
      {{/ifCond}}
      {{#ifCond ext '==' 'js'}}
      <li><a href="{{url}}" title="{{name}}"><i class="fa icon-javascript-alt"></i>{{name}}</a></li>
      {{/ifCond}}
      {{#ifCond ext '==' 'py'}}
      <li><a href="{{url}}" title="{{name}}"><i class="fa icon-python-alt"></i>{{name}}</a></li>
      {{/ifCond}}
      {{#ifCond ext '==' 'pyc'}}
      <li><a href="{{url}}" title="{{name}}"><i class="fa icon-python-alt"></i>{{name}}</a></li>
      {{/ifCond}}
      {{/ifCond}}
      {{/each}}
