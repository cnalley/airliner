extends ../../web_includes/common/layout

block includes
  include ../../web_includes/common/common_includes.pug

block header
  i.fa-fw.fa.fa-signal
  | Pilot Display (Test)

block main 
  .row
    article.col-xs-12.col-sm-12.col-md-6.col-lg-6
      #wid-map.jarviswidget.jarviswidget-color-blueDark(data-widget-editbutton='false',data-widget-colorbutton='false',data-widget-deletebutton='false')
        header
          span.widget-icon
            i.fa.fa-table
          h2 Map
        div
          .jarviswidget-editbox
            input.form-control(type='text')
          .widget-body
            style.
              @import url(bower_components/cesium/Source/Widgets/widgets.css);
            #cesiumContainer.fullSize

  script.
    var Position = {Lat: 0, Lon: 0, Alt: 0};
    var Attitude = {Yaw: 0, Pitch: 0, Roll: 0};

    loadScript('node_modules/cesium/Build/CesiumUnminified/Cesium.js', function () {
      /* Traveling Map */
      Cesium.BingMapsApi.defaultKey = 'Anb5ZQS9_Qvje--nom_9ZKwQyQVnOOU04Fctd1uxMHnYoQKIcp1XFDrZuXN6evOQ';
      var viewer = new Cesium.Viewer('cesiumContainer');

      var uas = viewer.entities.add({
        billboard: {
          image: 'ws/flight/aircraft.png',
          scale: 0.2,
          alignedAxis: Cesium.Cartesian3.UNIT_Z,
          rotation: 0.0,
        }
      });

      var scratchCartesian3 = new Cesium.Cartesian3();
      var ellipsoid = viewer.scene.mapProjection.ellipsoid;
      var GPSCount = 0;
      var GPSStarted = false;
      var GPSAnimating = false;

      session.subscribe({
          homogeneity: {tolerance: 0}, tlm: [
            {name: '/CFS/PX4/VGP_Alt'},
            {name: '/CFS/PX4/VGP_Lat'},
            {name: '/CFS/PX4/VGP_Lon'}]
        },
        function (params) {
          for (var i = 0; i < params.length; ++i) {
            switch (params[i].id.name) {
              
              case '/CFS/PX4/VGP_Lat':
                Position.Lat = params[i].engValue.floatValue;
                break;

              case '/CFS/PX4/VGP_Lon':
                Position.Lon = params[i].engValue.floatValue;
                break;

              case '/CFS/PX4/VGP_Alt':
                Position.Alt = (params[i].engValue.floatValue) - 488.0;
                break;
            }
          }

          if (GPSStarted == false) {
            /* Skip the first one. */
            GPSStarted = true;
            GPSCount++;
          }
        }
      );

    session.subscribe({
        homogeneity: {tolerance: 0}, tlm: [
            {'name': '/CFS/PX4/VA_Q_0'},
            {'name': '/CFS/PX4/VA_Q_1'},
            {'name': '/CFS/PX4/VA_Q_2'},
            {'name': '/CFS/PX4/VA_Q_3'}
        ]
      },
      function (params) {
        var Q = [];
        for (var i = 0; i < params.length; ++i) {
          switch (params[i].id.name) {
            case '/CFS/PX4/VA_Q_0':
              Q[0] = params[i].engValue.floatValue;
              break;
              
            case '/CFS/PX4/VA_Q_1':
              Q[1] = params[i].engValue.floatValue;
              break;
              
            case '/CFS/PX4/VA_Q_2':
              Q[2] = params[i].engValue.floatValue;
              break;
              
            case '/CFS/PX4/VA_Q_3':
              Q[3] = params[i].engValue.floatValue;
              break;
          }
        }
        
        Attitude.Yaw = Math.atan2((Q[1]*Q[2])-(Q[0]*Q[3]),0.5-((Q[2]*Q[2])+(Q[3]*Q[3])));
      }
    );

    var temp = 0;
    
    setInterval(function () {
      if (GPSStarted == true) {
        uas.position = Cesium.Cartesian3.fromDegrees(Position.Lon, Position.Lat);
        uas.billboard.rotation = Cesium.Math.PI_OVER_TWO - Attitude.Yaw;

        if (GPSAnimating == false) {
          GPSAnimating = true;
          viewer.camera.flyTo({
            destination: Cesium.Cartesian3.fromDegrees(Position.Lon, Position.Lat, 100),
            complete: function () {
              GPSAnimating = false;
            }
          });
        }
      }
    }, 100);
    });


     
