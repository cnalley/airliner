extends layout

block main
  script(type="text/javascript" charset="utf-8" src="/bower_components/svg.js/dist/svg.min.js")
  script(type="text/javascript" charset="utf-8" src="/bower_components/virtualjoystick.js/virtualjoystick.js")
      
  style.
    .center {
      margin-left: 0;
      margin-right: 0;
      width: 100%;
      text-align: center;
    }
    #touchpad {
      width   : 100%;
      height  : 100%;
      overflow    : hidden;
      padding : 0px;
      margin  : 0px;
      -webkit-user-select : none;
      -moz-user-select    : none;
      position: relative;
      top: 0px;
      left: 0px;
    }
    
  .row              
    article.col-xs-12.col-sm-12.col-md-12.col-lg-12
      #wid-Flight-HUD.jarviswidget.jarviswidget-color-blueDark(data-widget-editbutton='false',data-widget-colorbutton='false',data-widget-deletebutton='false')
        header
          span.widget-icon
            i.fa.fa-table
          h2 Attitude Indicator
        div
          .jarviswidget-editbox
            input.form-control(type='text')
          .widget-body.no-padding
            #touchpad
              #hud.no-padding 
  .row
    article.col-xs-12.col-sm-12.col-md-12.col-lg-12
      #wid-Flight-Controls.jarviswidget.jarviswidget-color-blueDark(data-widget-editbutton='false',data-widget-colorbutton='false',data-widget-deletebutton='false')
        header
          span.widget-icon
            i.fa.fa-table
          h2 Controls
        div
          .jarviswidget-editbox
            input.form-control(type='text')
          .widget-body.center
            .btn-group-vertical.btn-group-lg
                      button.btn.btn-success(data-sage={cmd:{Name:'EIM_Launch'}}) Launch
                      button.btn.btn-default.txt-color-white.bg-color-yellow(data-sage={cmd:{Name:'EIM_Land'}}) Land
            .btn-group.btn-group-lg
                      button.btn.btn-primary(data-sage={cmd:{Name:'EIM_Hover'}}) Hover
            .btn-group-vertical.btn-group-lg
                      button.btn.btn-primary(data-sage={cmd:{Name:'EIM_Yaw'}}) Yaw
                      button.btn.btn-primary(data-sage={cmd:{Name:'EIM_Pitch'}}) Pitch
                      button.btn.btn-primary(data-sage={cmd:{Name:'EIM_Roll'}}) Roll
            .btn-group-vertical.btn-group-lg
                      button.btn.btn-primary(data-sage={cmd:{Name:'EIM_Vertical'}}) Vertical
                      button.btn.btn-primary(data-sage={cmd:{Name:'EIM_Move'}}) Move
                      button.btn.btn-primary(data-sage={cmd:{Name:'EIM_SetFlatTrim'}}) Set Flat Trim
            .btn-group-vertical.btn-group-lg
                      .btn.btn-danger.btn-circle.btn-xl(data-sage={cmd:{Name:'EIM_EmergencyStop'}})
            .btn-group-vertical.btn-group-lg
                      button#btn_reset_emergency_stop.btn.btn-primary(data-sage={cmd:{Name:'EIM_EmergencyStopReset'}}) Reset Emergency Stop
                      button.btn.btn-primary(data-sage={cmd:{Name:'EIM_CalibrateMagnetometer'}}) Calibrate Magnetometer
                      button.btn.btn-primary(data-sage={cmd:{Name:'EIM_SetControlMode'}}) Set Control Mode

block scripts
  script.
      var draw;
      var curHeading = 0;
      var curPitch = 0;
      var curRoll = 0;
      var curAltitude = 0.0;
      var textHeading;
      var hdTicks;
      var hdTicksMask;
      var hdWidth;
      var hudHeight;
      var hudWidth;
      var pxPer15Degrees;
      var pxPerDegree;
      var degPerPitchLine = 15;
      var posPitchLineOnScreen = 3.5;
      var pxPerPitchLine;
      var pxPerDegreePitch;
      var pitchIndicator;
      var altPosMetersOnScreen = 5;
      var altPxPerMeter;
      var altitudeIndicator;
      var textAltitude;
      var altTicks;
      
      drawHUD();
             
      function updateHUDHeading(newHeading)
      {
        textHeading.text(newHeading.toFixed(0).toString());
        hdTicks.x(-newHeading*pxPerDegree);
      }
        
      function updateHUDPitch(newPitch)
      {
        pitchIndicator.y(newPitch*pxPerDegreePitch);
      }
        
      function updateHUDRoll(newRoll)
      {
        pitchIndicator.rotate(newRoll, hudWidth/2, hudHeight/2); 
      }
        
      function updateHUDAltitude(newAltitude)
      {
        textAltitude.text(newAltitude.toFixed(1).toString());
        altTicks.y(newAltitude*altPxPerMeter);
      }
    
      $('#hud').on('resize', function(event) {
        console.log("Resized");
        $('svg').remove();
        drawHUD();
        //updateHUDAltitude(10);
        //updateHUDHeading(20);
        //updateHUDPitch(30);
        //updateHUDRoll(40);
      });
      
      
      function drawHUD()
      {
        var aspectRatio = 320.0 / 200.0;
        hudWidth = $('#hud').width();
        hudHeight = hudWidth / aspectRatio;
        if($( window ).height() < hudHeight)
        {
          hudHeight = $( window ).height()-50;
          hudWidth = hudHeight * aspectRatio;
        }
        draw = SVG('hud').size('100%', hudHeight);
        
        if (SVG.supported == false) 
        {
          alert('SVG not supported with ths browser.');
        } 
        else 
        {
          var bgOpacity = 0.5;
          var rect = draw.rect('100%', '100%').attr({ fill: '#000000' });
          draw.fixSubPixelOffset();
          draw.attr('preserveAspectRatio', 'x320Y200 meet');
          var rollIndicator = draw.group();
          
          /* -------------------------
                 Draw altimeter
             ------------------------- */
          var altWidth = 50;
          var altHeight = hudHeight - 10;
          var altWidth = 50;
          var altHeight = hudHeight - 10;
          altPxPerMeter = altHeight / altPosMetersOnScreen;
          var altPxPerDecimeter = altPxPerMeter / 10.0;
          var altPxPerCentimeter = altPxPerMeter / 100.0;
          var altPxPerMillimeter = altPxPerMeter / 1000.0;
          
          var altimeter = draw.group();
          var altBorder = altimeter.group();
          /* Draw border. */
          var altRec1 = altBorder.rect(altWidth, altHeight).attr({ 
            x: hudWidth-altWidth-5, 
            y: 5, 
            stroke: '#ffffff',
            'stroke-width': '3px',
            rx: 5,
            ry: 5,
            'fill-opacity': bgOpacity
          });
          var altRec2 = altBorder.rect(altWidth, altHeight).attr({ 
            x: hudWidth-altWidth-5, 
            y: 5, 
            stroke: '#00ff00',
            rx: 5,
            ry: 5,
            'fill-opacity': bgOpacity
          });
          /* Draw ticks group. */
          var altTicksArea = altimeter.group();
          altTicks = altTicksArea.group();
          for(i = 0; i < (10*(altPosMetersOnScreen+1+30)); i++)
          {
            y = (hudHeight/2)-i*(altPxPerDecimeter);
            /* Draw a longer line if its a meter interval. */
            if(i % 10 == 0)
            {
              altTicks.line(hudWidth-altWidth-3, y, hudWidth-altWidth+20, y).attr({
                width: 2,
                stroke: '#00ff00'
              });
              
              var textAltTick = altTicks.text((i/10.0).toString()).move(hudWidth-altWidth+30,y-5);
              textAltTick.font({
                fill: '#00ff00',
                anchor: 'start',
                size: 13
              });
            }
            else
            {
              /* This is just a decimeter tick. */
              altTicks.line(hudWidth-altWidth-3, y, hudWidth-altWidth+10, y).attr({
                width: 1,
                stroke: '#00ff00'
              });
            }
          }
          for(i = 0; i > (-10*(altPosMetersOnScreen+1)); i--)
          {
            y = (hudHeight/2)-i*(altPxPerDecimeter);
            /* Draw a longer line if its a meter interval. */
            if(i % 10 == 0)
            {
              altTicks.line(hudWidth-altWidth-3, y, hudWidth-altWidth+20, y).attr({
                width: 2,
                stroke: '#00ff00'
              });
              
              var textAltTick = altTicks.text((i/10.0).toString()).move(hudWidth-altWidth+30,y-5);
              textAltTick.font({
                fill: '#00ff00',
                anchor: 'start',
                size: 13
              });
            }
            else
            {
              /* This is just a decimeter tick. */
              altTicks.line(hudWidth-altWidth-3, y, hudWidth-altWidth+10, y).attr({
                width: 1,
                stroke: '#00ff00'
              });
            }
          }
          /* Draw center altitude indicator. */
          var altCenter = altimeter.group();
          var altCenterHeight = 30;
          altCenter.polyline([
            [hudWidth-altWidth-5, hudHeight/2],
            [hudWidth-altWidth+15, (hudHeight-altCenterHeight)/2],
            [hudWidth-5, (hudHeight-altCenterHeight)/2],
            [hudWidth-5, (hudHeight+altCenterHeight)/2],
            [hudWidth-altWidth+15, (hudHeight+altCenterHeight)/2],
            [hudWidth-altWidth-5, hudHeight/2]]).attr({
              stroke: '#ffffff',
              'stroke-width': 3,
              'fill-opacity': 0.0
          });
          altCenter.polyline([
            [hudWidth-altWidth-5, hudHeight/2],
            [hudWidth-altWidth+15, (hudHeight-altCenterHeight)/2],
            [hudWidth-5, (hudHeight-altCenterHeight)/2],
            [hudWidth-5, (hudHeight+altCenterHeight)/2],
            [hudWidth-altWidth+15, (hudHeight+altCenterHeight)/2],
            [hudWidth-altWidth-5, hudHeight/2]]).attr({
            stroke: '#00ff00',
            'stroke-width': 2,
            'fill-opacity': 0.0         
          });
          textAltitude = altCenter.text('0.0').move(hudWidth-altWidth+14, (hudHeight/2)-9);
          //textAltitude.attr("dominant-baseline", "middle");
          textAltitude.font({
            fill: '#00ff00',
            size: 18
          });
          var altTicksMask = altimeter.mask();
          altTicksMask.rect(hudWidth, hudHeight).attr({
            fill: '#000000'         
          });
          altTicksMask.rect(altWidth, altHeight).attr({ 
            x: hudWidth-altWidth-5, 
            y: 5, 
            fill: '#ffffff',
            'stroke-width': '3px',
            rx: 5,
            ry: 5
          });
          altTicksMask.polyline([
            [hudWidth-altWidth-5, hudHeight/2],
            [hudWidth-altWidth+15, (hudHeight-altCenterHeight)/2],
            [hudWidth-5, (hudHeight-altCenterHeight)/2],
            [hudWidth-5, (hudHeight+altCenterHeight)/2],
            [hudWidth-altWidth+15, (hudHeight+altCenterHeight)/2],
            [hudWidth-altWidth-5, hudHeight/2]]).attr({
            fill: '#000000'         
          });
          altTicksArea.maskWith(altTicksMask);
          
          /* -------------------------
                    Draw Heading
             ------------------------- */
          var hdHeight = 50;
          hdWidth = hudWidth - 120;
          pxPer15Degrees = (hdWidth/2) / 5;
          pxPerDegree = pxPer15Degrees / 15.0;
          var heading = draw.group();
          var headingBorder = heading.group();
          /* Draw border. */
          var hdRec1 = headingBorder.rect(hdWidth, hdHeight).attr({ 
            x: (hudWidth-hdWidth)/2, 
            y: hudHeight-hdHeight-5, 
            stroke: '#ffffff',
            'stroke-width': '3px',
            rx: 5,
            ry: 5,
            'fill-opacity': bgOpacity
          });
          var hdRec2 = headingBorder.rect(hdWidth, hdHeight).attr({  
            x: (hudWidth-hdWidth)/2, 
            y: hudHeight-hdHeight-5, 
            stroke: '#00ff00',
            'stroke-width': '1px',
            rx: 5,
            ry: 5,
            'fill-opacity': bgOpacity
          });
          /* Draw ticks group. */
          hdTicksArea = heading.group();
          hdTicks = hdTicksArea.group();
          for(i = 0; i < (360+90); i++)
          {
            if(i % 15 == 0)
            {
              x = ((hudWidth)/2) + (pxPerDegree * i);
              console.log(x);
              hdTicks.line(x, hudHeight-hdHeight-3, x, hudHeight-hdHeight+10).attr({
                width: 1,
                stroke: '#00ff00'
              });
              
              var fixedHeading = i;
              if(i < 0)
              {
                fixedHeading = 360 + i;
              }
              else if(i >= 360)
              {
                fixedHeading = i - 360;
              }
              
              var textHeadingTick = hdTicks.text(fixedHeading.toString()).move(x,hudHeight-hdHeight+13);
              textHeadingTick.font({
                fill: '#00ff00',
                anchor: 'middle',
                size: 13
              });
            }
          }
          for(i = 0; i > (-360-90); i--)
          {
            if(i % 15 == 0)
            {
              x = ((hudWidth)/2) + (pxPerDegree * i);
              hdTicks.line(x, hudHeight-hdHeight-3, x, hudHeight-hdHeight+10).attr({
                width: 1,
                stroke: '#00ff00'
              });
              
              var fixedHeading = i;
              if(i < 0)
              {
                fixedHeading = 360 + i;
              }
              else if(i >= 360)
              {
                fixedHeading = i - 360;
              }
              
              var textHeadingTick = hdTicks.text(fixedHeading.toString()).move(x,hudHeight-hdHeight+13);
              textHeadingTick.font({
                fill: '#00ff00',
                anchor: 'middle',
                size: 13
              });
            }
          }
          /* Draw center heading indicator. */
          var hdCenter = heading.group();
          var hdCenterWidth = 60;
          hdCenter.polyline([
            [hudWidth/2, hudHeight-hdHeight-5],
            [(hudWidth+20)/2, hudHeight-hdHeight+10],
            [(hudWidth+hdCenterWidth)/2, hudHeight-hdHeight+10],
            [(hudWidth+hdCenterWidth)/2, hudHeight-5],
            [(hudWidth-hdCenterWidth)/2, hudHeight-5],
            [(hudWidth-hdCenterWidth)/2, hudHeight-hdHeight+10],
            [(hudWidth-20)/2, hudHeight-hdHeight+10],
            [hudWidth/2, hudHeight-hdHeight-5]]).attr({
              stroke: '#ffffff',
              'stroke-width': 3,
              'fill-opacity': 0.0
          });
          hdCenter.polyline([
            [hudWidth/2, hudHeight-hdHeight-5],
            [(hudWidth+20)/2, hudHeight-hdHeight+10],
            [(hudWidth+hdCenterWidth)/2, hudHeight-hdHeight+10],
            [(hudWidth+hdCenterWidth)/2, hudHeight-5],
            [(hudWidth-hdCenterWidth)/2, hudHeight-5],
            [(hudWidth-hdCenterWidth)/2, hudHeight-hdHeight+10],
            [(hudWidth-20)/2, hudHeight-hdHeight+10],
            [hudWidth/2, hudHeight-hdHeight-5]]).attr({
              stroke: '#00ff00',
              'stroke-width': 2,
              'fill-opacity': 0.0
          });
          textHeading = draw.text('0').move((hudWidth/2),hudHeight-hdHeight+13);
          textHeading.font({
            fill: '#00ff00',
            anchor: 'middle',
            size: 23
          });
          
          hdTicksMask = heading.mask();
          
          hdTicksMask.rect(hudWidth, hudHeight).attr({
            fill: '#000000'         
          });
          hdTicksMask.rect(hdWidth, hdHeight).attr({  
            x: (hudWidth-hdWidth)/2, 
            y: hudHeight-hdHeight-5, 
            stroke: '#00ff00',
            'stroke-width': '1px',
            rx: 5,
            ry: 5,
            fill: '#ffffff'
          });
          hdTicksMask.polyline([
            [hudWidth/2, hudHeight-hdHeight-5],
            [(hudWidth+20)/2, hudHeight-hdHeight+10],
            [(hudWidth+hdCenterWidth)/2, hudHeight-hdHeight+10],
            [(hudWidth+hdCenterWidth)/2, hudHeight-5],
            [(hudWidth-hdCenterWidth)/2, hudHeight-5],
            [(hudWidth-hdCenterWidth)/2, hudHeight-hdHeight+10],
            [(hudWidth-20)/2, hudHeight-hdHeight+10],
            [hudWidth/2, hudHeight-hdHeight-5]]).attr({
            fill: '#000000'         
          });
          hdTicksArea.maskWith(hdTicksMask);
          
          /* -------------------------
                 Draw horizon
             ------------------------- */
          var hrzWidth = (hudWidth-altWidth)*0.3;
          var hrzInterval;
          var horizonArea = draw.group();
          pxPerPitchLine = ((hudWidth/2) / posPitchLineOnScreen);
          pxPerDegreePitch = pxPerPitchLine / degPerPitchLine; 
          pitchIndicator = horizonArea.group();
          
          for(i = 0; i <= 90; i++)
          {
            if(i % degPerPitchLine == 0)
            {
              y = ((hudHeight)/2) - (pxPerDegreePitch * i);
              
              if(i>0)
              {
                pitchIndicator.polyline([
                  [(hudWidth-hrzWidth)/2, y],
                  [(hudWidth-(hrzWidth*0.10))/2, y],
                  [hudWidth/2, y+(hrzWidth*0.05)],
                  [(hudWidth+(hrzWidth*0.10))/2, y],
                  [(hudWidth+hrzWidth)/2, y]]).attr({
                  'stroke-width': 3,
                  stroke: '#ffffff'
                });
                pitchIndicator.polyline([
                  [(hudWidth-hrzWidth)/2, y],
                  [(hudWidth-(hrzWidth*0.10))/2, y],
                  [hudWidth/2, y+(hrzWidth*0.05)],
                  [(hudWidth+(hrzWidth*0.10))/2, y],
                  [(hudWidth+hrzWidth)/2, y]]).attr({
                  'stroke-width': 2,
                  stroke: '#00ff00'
                });
                         
                var fixedPitch = i;
                if(i > 90)
                {
                  fixedPitch = 180 - i;
                }
                
                var leftTextPitchLine = pitchIndicator.text(fixedPitch.toString()).move((hudWidth-hrzWidth)/2 - 5, y-7);
                leftTextPitchLine.font({
                  fill: '#00ff00',
                  anchor: 'end',
                  size: 15,
                });
                
                var rightTextPitchLine = pitchIndicator.text(fixedPitch.toString()).move((hudWidth+hrzWidth)/2 + 5, y-7);
                rightTextPitchLine.font({
                  fill: '#00ff00',
                  anchor: 'start',
                  size: 15,
                });
              }
              else
              {
                pitchIndicator.line(-hudWidth, y, 2*hudWidth, y).attr({
                  'stroke-width': 3,
                  stroke: '#ffffff'
                });
                pitchIndicator.line(-hudWidth, y, 2*hudWidth, y).attr({
                  'stroke-width': 2,
                  stroke: '#00ff00'
                });
              }
            }
          }         
          
          for(i = 0; i >= -90; i--)
          {
            if(i % degPerPitchLine == 0)
            {
              y = ((hudHeight)/2) - (pxPerDegreePitch * i);
              
              if(i<0)
              {
                pitchIndicator.polyline([
                  [(hudWidth-hrzWidth)/2, y],
                  [(hudWidth-(hrzWidth*0.10))/2, y],
                  [hudWidth/2, y-(hrzWidth*0.05)],
                  [(hudWidth+(hrzWidth*0.10))/2, y],
                  [(hudWidth+hrzWidth)/2, y]]).attr({
                  'stroke-width': 3,
                  stroke: '#ffffff'
                });
                pitchIndicator.polyline([
                  [(hudWidth-hrzWidth)/2, y],
                  [(hudWidth-(hrzWidth*0.10))/2, y],
                  [hudWidth/2, y-(hrzWidth*0.05)],
                  [(hudWidth+(hrzWidth*0.10))/2, y],
                  [(hudWidth+hrzWidth)/2, y]]).attr({
                  'stroke-width': 2,
                  stroke: '#00ff00'
                });
                           
                var fixedPitch = i;
                if(i < -90)
                {
                  fixedPitch = -180 - i;
                }
                
                var leftTextPitchLine = pitchIndicator.text(fixedPitch.toString()).move((hudWidth-hrzWidth)/2 - 5, y-7);
                leftTextPitchLine.font({
                  fill: '#00ff00',
                  anchor: 'end',
                  size: 15,
                });
                
                var rightTextPitchLine = pitchIndicator.text(fixedPitch.toString()).move((hudWidth+hrzWidth)/2 + 5, y-7);
                rightTextPitchLine.font({
                  fill: '#00ff00',
                  anchor: 'start',
                  size: 15,
                });
              }
            }
          }
          
          hrzMask = pitchIndicator.mask();
          hrzMask.rect(hudWidth, hudHeight).attr({
            fill: '#000000'     
          });
          hrzMask.rect(hudWidth-altWidth-20, hudHeight-hdHeight-20).attr({
            fill: '#ffffff',
            x: 5,
            y: 5
          });
          horizonArea.maskWith(hrzMask);
        }
      }
      
      var pitchDirection = 0.2;
      var altitudeDirection = 0.01;
      /*
      setInterval(function () {
          curHeading += 0.2;
          if(curHeading >= 360)
          {
            curHeading = 0;
          }
          
          curPitch += pitchDirection;
          if(curPitch >= 90)
          {
            pitchDirection = -0.2;
            curPitch = 89;
          }
          if(curPitch <= -90)
          {
            pitchDirection = 0.2;
            curPitch = -89;
          }
          
          curAltitude += altitudeDirection;
          if(curAltitude > 10)
          {
            altitudeDirection = -0.01;
            curAltitude = 9.9;
          }
          if(curAltitude < 0 )
          {
            altitudeDirection = 0.01;
            curAltitude = 0.01;
          }          
          
          curRoll += 0.2;
          if(curRoll > 180)
          {
            curRoll = -178;
          }
          
          updateHUDHeading(curHeading);
          updateHUDRoll(curRoll);
          updateHUDPitch(curPitch);
          updateHUDAltitude(curAltitude);
        }, 20);
        */
        
        //var joystick  = new VirtualJoystick({
        //  container   : document.getElementById('touchpad2'),
        //  mouseSupport    : true,   
        //  limitStickTravel: true,
        //  stickRadius : 50,
        //});
        
        //joystick.addEventListener('touchStart', function(){
        //  console.log('down')
        //})
        //joystick.addEventListener('touchEnd', function(){
        //  console.log('up')
        //})
        
        //setInterval(function(){
        //  //var outputEl	= document.getElementById('result');
        //  console.log	= ' dx:'+joystick.deltaX()
        //    + ' dy:'+joystick.deltaY()
        //    + (joystick.right()	? ' right'	: '')
        //    + (joystick.up()	? ' up'	: '')
        //    + (joystick.left()	? ' left'	: '')
        //    + (joystick.down()	? ' down' : '')	
        //    }, 1/30 * 1000);
      
        
          //-Disable button when not in emergency state
          sage.Subscribe('EIMARD2_ARDroneState_Emergency', function(signal) {
            if(signal.value) {
              $('#btn_reset_emergency_stop').removeClass("disabled");
            }
            else {
              $('#btn_reset_emergency_stop').addClass("disabled");
            }
          });
          
          sage.Subscribe('EIMARD2_Theta', function(record) {
            angle = record.value / 1000;
            updateHUDPitch(angle);
          });
                  
          sage.Subscribe('EIMARD2_Psi', function(record) {
            angle = record.value / 1000;
            if(angle < 0)
            {
              angle = 360.0 + angle;
            }
            updateHUDHeading(angle);
          });
                
          sage.Subscribe('EIMARD2_Phi', function(record) {
            angle = record.value / 1000;
            updateHUDRoll(-angle);
          });
            
          sage.Subscribe('EIMARD2_Altitude', function(record) {          
            meters = record.value / 1000;
            updateHUDAltitude(meters);
          });
      
        
        